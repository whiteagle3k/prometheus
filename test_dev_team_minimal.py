#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import sys
import asyncio
from pathlib import Path
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

def test_entities_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from entities import discover_entities
        entities = discover_entities()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(entities)}")
        
        required_agents = ['petrovich', 'vasya', 'marina']
        for agent in required_agents:
            if agent in entities:
                info = entities[agent]
                print(f"   ‚úÖ {agent}:")
                print(f"      –ö–ª–∞—Å—Å: {info['class'].__name__}")
                print(f"      –†–æ–ª—å: {info.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...")
            else:
                print(f"   ‚ùå {agent}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_identity_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è identity —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è identity —Ñ–∞–π–ª–æ–≤...")
    
    identity_paths = {
        'petrovich': 'entities/supervisor/identity/identity.json',
        'vasya': 'entities/vasya/identity/identity.json', 
        'marina': 'entities/marina/identity/identity.json'
    }
    
    all_found = True
    
    for agent, path in identity_paths.items():
        file_path = Path(path)
        if file_path.exists():
            try:
                import json
                with open(file_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                name = config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                role = config.get('personality', {}).get('role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ä–æ–ª—å')
                
                print(f"   ‚úÖ {agent} ({name}): {role}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['name', 'llm_instructions', 'external_llms']
                missing_fields = [field for field in required_fields if field not in config]
                
                if missing_fields:
                    print(f"      ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                
            except Exception as e:
                print(f"   ‚ùå {agent}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - {e}")
                all_found = False
        else:
            print(f"   ‚ùå {agent}: —Ñ–∞–π–ª identity –Ω–µ –Ω–∞–π–¥–µ–Ω - {path}")
            all_found = False
    
    return all_found

def test_agent_classes():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        for name in ['petrovich', 'vasya', 'marina']:
            if name in entities_info:
                entity_class = entities_info[name]['class']
                print(f"   ‚úÖ {name}: –∫–ª–∞—Å—Å {entity_class.__name__} –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
                if hasattr(entity_class, '__init__'):
                    print(f"      –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ‚úì")
                else:
                    print(f"      ‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞")
                
                if hasattr(entity_class, '_load_identity'):
                    print(f"      –ú–µ—Ç–æ–¥ _load_identity: ‚úì")
                else:
                    print(f"      ‚ö†Ô∏è –ù–µ—Ç –º–µ—Ç–æ–¥–∞ _load_identity")
                    
            else:
                print(f"   ‚ùå {name}: –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_agent_identity_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ identity –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ identity...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        for name in ['petrovich', 'vasya', 'marina']:
            entity_class = entities_info[name]['class']
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è _load_identity
            temp_instance = object.__new__(entity_class)  # –ò–∑–±–µ–≥–∞–µ–º –≤—ã–∑–æ–≤–∞ __init__
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É identity
                identity = temp_instance._load_identity()
                
                agent_name = identity.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   ‚úÖ {name} ({agent_name}): identity –∑–∞–≥—Ä—É–∂–µ–Ω")
                print(f"      LLM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {'‚úì' if 'llm_instructions' in identity else '‚ùå'}")
                print(f"      –í–Ω–µ—à–Ω–∏–µ LLM: {'‚úì' if 'external_llms' in identity else '‚ùå'}")
                print(f"      –õ–∏—á–Ω–æ—Å—Ç—å: {'‚úì' if 'personality' in identity else '‚ùå'}")
                
            except Exception as e:
                print(f"   ‚ùå {name}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ identity - {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_llm_configurations():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        expected_models = {
            'petrovich': 'gpt-4o',
            'vasya': 'claude-3-5-sonnet-20241022',
            'marina': 'gpt-4o'
        }
        
        for name in ['petrovich', 'vasya', 'marina']:
            entity_class = entities_info[name]['class']
            temp_instance = object.__new__(entity_class)
            
            try:
                identity = temp_instance._load_identity()
                external_llms = identity.get('external_llms', {})
                primary_provider = external_llms.get('primary_provider', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
                print(f"   ‚úÖ {name}: –ø—Ä–æ–≤–∞–π–¥–µ—Ä {primary_provider}")
                
                providers = external_llms.get('providers', {})
                for provider, config in providers.items():
                    model = config.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    enabled = config.get('enabled', False)
                    print(f"      {provider}: {model} ({'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'})")
                
            except Exception as e:
                print(f"   ‚ùå {name}: –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM - {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_team_hierarchy():
    """–¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–æ–º–∞–Ω–¥—ã...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        expected_hierarchy = {
            'petrovich': {'role': 'team_lead', 'reports_to': None, 'direct_reports': ['vasya', 'marina']},
            'vasya': {'role': 'implementer', 'reports_to': 'petrovich'},
            'marina': {'role': 'quality_guardian', 'reports_to': 'petrovich'}
        }
        
        for name, expected in expected_hierarchy.items():
            if name in entities_info:
                info = entities_info[name]
                
                role = info.get('role', info.get('team_position', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'))
                reports_to = info.get('reports_to')
                
                print(f"   ‚úÖ {name}:")
                print(f"      –†–æ–ª—å: {role}")
                if reports_to:
                    print(f"      –ü–æ–¥—á–∏–Ω—è–µ—Ç—Å—è: {reports_to}")
                    
                if 'direct_reports' in expected:
                    reports = info.get('direct_reports', [])
                    print(f"      –ü–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–µ: {reports}")
                    
            else:
                print(f"   ‚ùå {name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("=" * 60)
    print("(–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BaseEntity)")
    
    tests = [
        ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤", test_entities_registration),
        ("Identity —Ñ–∞–π–ª—ã", test_identity_files),
        ("–ö–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤", test_agent_classes),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ identity", test_agent_identity_loading),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM", test_llm_configurations),
        ("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–º–∞–Ω–¥—ã", test_team_hierarchy)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìù {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            if result:
                passed += 1
                print(f"   ‚úÖ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   ‚ùå –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å ChromaDB:")
        print("   rm -rf storage/chromadb/")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 
#!/usr/bin/env python3
"""
–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –º–æ–∫–∏–Ω–≥–æ–º
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å ChromaDB –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import patch, MagicMock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

# Mock –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç ChromaDB
class MockVectorStore:
    def __init__(self):
        self.memory_collection = MagicMock()
        self.reflection_collection = MagicMock()
        self._access_lock = asyncio.Lock()
    
    async def store_memory(self, content, memory_type="experience", metadata=None):
        return "mock_memory_id"
    
    async def search_memories(self, query, n_results=5, memory_type=None):
        return []
    
    async def get_memory_count(self):
        return 0
    
    async def cleanup_old_memories(self, keep_count=None):
        return 0

class MockMemorySummariser:
    def __init__(self, vector_store):
        self.vector_store = vector_store
    
    async def create_summary_if_needed(self, experiences):
        return None

class MockUserProfileStore:
    def __init__(self):
        self.extractor = MagicMock()
        self.extractor.is_information_providing = MagicMock(return_value=False)
    
    async def update_user_data(self, user_name, input_text, context=""):
        pass
    
    async def is_data_query(self, input_text):
        return False
    
    async def get_user_data_summary(self, user_name):
        return "Mock user profile summary"

class MockConversationContext:
    def __init__(self, identity_config):
        self.identity_config = identity_config
        self.user_name = None
        self.episodes = []
        self.running_summary = "Mock conversation context"
        
    def update_from_input(self, user_text, user_id=None):
        self.user_name = user_id
        
    def should_plan_task(self, user_input):
        return len(user_input) > 100  # Simple heuristic
    
    def add_episode(self, input_text, response, execution_details):
        self.episodes.append({
            "input": input_text,
            "response": response,
            "details": execution_details
        })
    
    async def update_summary_from_exchange(self, input_text, response):
        pass
    
    def get_context_summary(self):
        return {"episodes": len(self.episodes)}

class MockLLMRouter:
    def __init__(self, identity_config):
        self.identity_config = identity_config
        self.utility_llm = None
    
    async def route_query(self, user_input, context=None, memories=None):
        # Simulate LLM response
        return {
            "response": f"Mock response to: {user_input[:50]}...",
            "execution_details": {
                "route_used": "external",
                "approach": "mock_reasoning",
                "execution_time": 0.1,
                "estimated_cost": 0.001
            }
        }

async def test_team_discovery():
    """–¢–µ—Å—Ç 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    print("üîç –¢–µ—Å—Ç 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        from entities import discover_entities
        entities = discover_entities()
        
        required_agents = ['petrovich', 'vasya', 'marina']
        for agent in required_agents:
            assert agent in entities, f"–ê–≥–µ–Ω—Ç {agent} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç: {agent}")
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_agent_creation_with_mocking():
    """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –º–æ–∫–∏–Ω–≥–æ–º"""
    print("\nüöÄ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –º–æ–∫–∏–Ω–≥–æ–º")
    
    # –ú–æ–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    with patch('core.memory.vector_store.VectorStore', MockVectorStore), \
         patch('core.memory.summariser.MemorySummariser', MockMemorySummariser), \
         patch('core.memory.user_profile_store.UserProfileStore', MockUserProfileStore), \
         patch('core.context.context_manager.ConversationContext', MockConversationContext), \
         patch('core.llm.router.LLMRouter', MockLLMRouter), \
         patch('core.memory.controller.MemoryController', MagicMock), \
         patch('core.goals.goal_manager.GoalManager', MagicMock):
        
        try:
            from entities import discover_entities
            entities_info = discover_entities()
            
            agents = {}
            for name in ['petrovich', 'vasya', 'marina']:
                if name in entities_info:
                    entity_class = entities_info[name]['class']
                    agent = entity_class()
                    agents[name] = agent
                    print(f"‚úÖ {name}: —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    assert hasattr(agent, 'identity_config'), f"–£ –∞–≥–µ–Ω—Ç–∞ {name} –Ω–µ—Ç identity_config"
                    assert hasattr(agent, 'think'), f"–£ –∞–≥–µ–Ω—Ç–∞ {name} –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ think"
                    
            return agents
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return {}

async def test_agent_thinking(agents):
    """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüß† –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
    
    if not agents:
        print("‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        test_queries = {
            'petrovich': "–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç. –†–∞–∑–±–µ–π –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏.",
            'vasya': "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—è bcrypt.",
            'marina': "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –Ω–∞ edge cases."
        }
        
        results = {}
        
        for agent_name, query in test_queries.items():
            if agent_name in agents:
                agent = agents[agent_name]
                print(f"   –¢–µ—Å—Ç–∏—Ä—É—é {agent_name}...")
                
                try:
                    response = await agent.think(query)
                    assert response is not None, f"–ê–≥–µ–Ω—Ç {agent_name} –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç"
                    assert len(response) > 10, f"–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ {agent_name} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
                    
                    results[agent_name] = response
                    print(f"‚úÖ {agent_name}: –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                except Exception as e:
                    print(f"‚ùå {agent_name}: –æ—à–∏–±–∫–∞ - {e}")
                    return False
        
        return len(results) == 3
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è: {e}")
        return False

async def test_agent_personalities(agents):
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüë§ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–æ–≤")
    
    if not agents:
        print("‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        expected_personalities = {
            'petrovich': ['—Ñ–ª–µ–≥–º–∞—Ç–∏—á–Ω—ã–π', '–æ–ø—ã—Ç–Ω—ã–π', '–≤–∞–ª–∏–¥–∞—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'],
            'vasya': ['—ç–Ω—Ç—É–∑–∏–∞—Å—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π', '–ø–æ—Å–ª—É—à–Ω—ã–π'],
            'marina': ['–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è']
        }
        
        for agent_name, expected_traits in expected_personalities.items():
            if agent_name in agents:
                agent = agents[agent_name]
                identity = agent.identity_config
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏
                personality = identity.get('personality', {})
                llm_instructions = identity.get('llm_instructions', '').lower()
                
                print(f"   {agent_name} ({identity.get('name', 'Unknown')}):")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —á–µ—Ä—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                traits_found = 0
                for trait in expected_traits:
                    if trait.lower() in llm_instructions or \
                       any(trait.lower() in str(v).lower() for v in personality.values()):
                        traits_found += 1
                        print(f"      ‚úì {trait}")
                
                if traits_found >= 2:
                    print(f"‚úÖ {agent_name}: –ª–∏—á–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
                else:
                    print(f"‚ö†Ô∏è {agent_name}: –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {traits_found} –∏–∑ {len(expected_traits)} —á–µ—Ä—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π: {e}")
        return False

async def test_mcp_capabilities(agents):
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüîå –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    
    if not agents:
        print("‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        mcp_methods = [
            'read_file', 'write_file', 'list_directory',  # filesystem
            'git_status', 'git_add', 'git_commit',        # git
            'execute_command', 'run_script',              # terminal
            'web_search', 'http_get'                      # web
        ]
        
        for agent_name, agent in agents.items():
            available_methods = 0
            
            for method in mcp_methods:
                if hasattr(agent, method):
                    available_methods += 1
            
            print(f"‚úÖ {agent_name}: {available_methods}/{len(mcp_methods)} MCP –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MCP: {e}")
        return False

async def test_workflow_simulation(agents):
    """–¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\nüîÑ –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    
    if not agents:
        print("‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º workflow: User ‚Üí Petrovich ‚Üí Vasya ‚Üí Marina ‚Üí Petrovich
        
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç –∑–∞–¥–∞—á—É –ü–µ—Ç—Ä–æ–≤–∏—á—É
        task = "–î–æ–±–∞–≤—å –≤–∞–ª–∏–¥–∞—Ü–∏—é email –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {task}")
        
        # 2. –ü–µ—Ç—Ä–æ–≤–∏—á –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
        petrovich_response = await agents['petrovich'].think(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Å–ø–ª–∞–Ω–∏—Ä—É–π: {task}")
        print("‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É")
        
        # 3. –í–∞—Å—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç
        vasya_task = f"–ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ—Ä—É—á–∏–ª: {task}. –†–µ–∞–ª–∏–∑—É–π —ç—Ç–æ."
        vasya_response = await agents['vasya'].think(vasya_task)
        print("‚úÖ –í–∞—Å—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É")
        
        # 4. –ú–∞—Ä–∏–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç
        marina_task = f"–í–∞—Å—è —Å–æ–∑–¥–∞–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é email. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ."
        marina_response = await agents['marina'].think(marina_task)
        print("‚úÖ –ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ —Ä–µ—à–µ–Ω–∏–µ")
        
        # 5. –ü–µ—Ç—Ä–æ–≤–∏—á –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
        final_review = f"–í–∞—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, –ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞. –ü—Ä–∏–Ω–∏–º–∞—é –ª–∏ —Ä–∞–±–æ—Ç—É?"
        final_response = await agents['petrovich'].think(final_review)
        print("‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á –ø—Ä–æ–≤–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–≤—å—é")
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π workflow –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ workflow: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Å –º–æ–∫–∏–Ω–≥–æ–º)")
    print("=" * 70)
    
    tests = [
        ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", test_team_discovery),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", test_agent_creation_with_mocking),
    ]
    
    passed = 0
    total = len(tests)
    agents = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    for test_name, test_func in tests:
        print(f"üìù {test_name}:")
        try:
            result = await test_func()
            if isinstance(result, dict):  # test_agent_creation_with_mocking –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤
                agents = result
                result = len(agents) > 0
            
            if result:
                passed += 1
                print(f"‚úÖ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if agents:
        additional_tests = [
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è", test_agent_thinking),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π", test_agent_personalities),
            ("MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", test_mcp_capabilities),
            ("Workflow —Å–∏–º—É–ª—è—Ü–∏—è", test_workflow_simulation)
        ]
        
        for test_name, test_func in additional_tests:
            print(f"\nüìù {test_name}:")
            try:
                result = await test_func(agents)
                if result:
                    passed += 1
                    print(f"‚úÖ –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        total += len(additional_tests)
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚ú® –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   ‚úÖ –ê–≥–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ —Å–æ–∑–¥–∞—é—Ç—Å—è")
        print("   ‚úÖ Identity –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")
        print("   ‚úÖ –ê–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
        print("   ‚úÖ –õ–∏—á–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–æ–ª—è–º")
        print("   ‚úÖ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        print("   ‚úÖ Workflow –∫–æ–º–∞–Ω–¥—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 
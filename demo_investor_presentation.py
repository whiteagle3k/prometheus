#!/usr/bin/env python3
"""
üé¨ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø PROMETHEUS AI TEAM –î–õ–Ø –ò–ù–í–ï–°–¢–û–†–ê

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ê–≤—Ç–æ–Ω–æ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É AI –∞–≥–µ–Ω—Ç–æ–≤ 
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É Supervisor, Developer –∏ QA
- Fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è external-only –∞–≥–µ–Ω—Ç–æ–≤
- –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ MCP tools
- –ú—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
- –ü–æ–ª–Ω—ã–π workflow: User ‚Üí Supervisor ‚Üí Team ‚Üí Results

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- Python async/await
- External LLM integration (OpenAI GPT-4)
- MCP (Model Context Protocol) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
- Vector store –¥–ª—è –ø–∞–º—è—Ç–∏
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º technical ID –∏ human names
"""

import asyncio
import requests
import time
import json
from datetime import datetime
from pathlib import Path
import sys

# API endpoints
API_BASE = "http://localhost:8000"
CHAT_ENDPOINT = f"{API_BASE}/v1/chat"
HEALTH_ENDPOINT = f"{API_BASE}/health"
REGISTRY_ENDPOINT = f"{API_BASE}/v1/registry"

class InvestorDemo:
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Prometheus AI Team –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞."""
    
    def __init__(self):
        self.start_time = time.time()
        self.session_log = []
        self.created_files = []
    
    def print_header(self, title: str, level: int = 1):
        """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        if level == 1:
            print(f"\n{'='*80}")
            print(f"üéØ {title}")
            print(f"{'='*80}")
        elif level == 2:
            print(f"\n{'-'*60}")
            print(f"üìã {title}")
            print(f"{'-'*60}")
        else:
            print(f"\nüí° {title}")
    
    def print_section(self, icon: str, title: str, content: str):
        """–ü–µ—á–∞—Ç—å —Å–µ–∫—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π."""
        print(f"\n{icon} {title}:")
        for line in content.split('\n'):
            if line.strip():
                print(f"   {line}")
    
    async def wait_for_server(self, timeout=30) -> bool:
        """–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Prometheus API —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(timeout):
            try:
                response = requests.get(HEALTH_ENDPOINT, timeout=2)
                if response.status_code == 200:
                    print("‚úÖ Prometheus API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                    return True
            except:
                pass
            await asyncio.sleep(1)
            if i % 5 == 0:
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/{timeout}...")
        return False
    
    def get_registry_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö."""
        try:
            response = requests.get(REGISTRY_ENDPOINT, timeout=5)
            if response.status_code == 200:
                return response.json()
            return {}
        except:
            return {}
    
    async def send_to_agent(self, agent_id: str, message: str, user_id: str = "investor_demo") -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        
        agent_names = {
            "supervisor": "–ü–µ—Ç—Ä–æ–≤–∏—á",
            "developer": "–í–∞—Å—è", 
            "qa": "–ú–∞—Ä–∏–Ω–∞",
            "aletheia": "–ê–ª–µ—Ç–µ–π—è"
        }
        
        agent_name = agent_names.get(agent_id, agent_id)
        
        print(f"\nüì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú ‚Üí {agent_name.upper()} ({agent_id}):")
        print(f"   –ó–∞–ø—Ä–æ—Å: {message}")
        
        try:
            start_time = time.time()
            response = requests.post(
                CHAT_ENDPOINT,
                params={"entity": agent_id},
                json={"message": message, "user_id": user_id},
                timeout=120
            )
            elapsed_time = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                route = result.get('route', 'unknown')
                latency = result.get('latency', elapsed_time)
                
                print(f"\nüì• –ü–û–õ–£–ß–ê–ï–ú ‚Üê {agent_name.upper()}:")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {latency:.1f}—Å")
                print(f"   üõ§Ô∏è  –ú–∞—Ä—à—Ä—É—Ç: {route}")
                print(f"   üí¨ –û—Ç–≤–µ—Ç:")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                for line in answer.split('\n'):
                    if line.strip():
                        print(f"      {line}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
                self.session_log.append({
                    "timestamp": datetime.now().isoformat(),
                    "agent_id": agent_id,
                    "agent_name": agent_name,
                    "request": message,
                    "response": answer,
                    "route": route,
                    "latency": latency,
                    "success": True,
                    "elapsed_time": elapsed_time
                })
                
                return {
                    "success": True, 
                    "answer": answer, 
                    "route": route, 
                    "latency": latency,
                    "elapsed_time": elapsed_time
                }
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def check_created_files(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ."""
        created_files = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        possible_paths = [
            Path("."),
            Path("output"),
            Path("generated"),
            Path("work"),
            Path("demo_output"),
            Path("tmp")
        ]
        
        for base_path in possible_paths:
            if base_path.exists():
                for file_path in base_path.rglob("*.py"):
                    if file_path.stat().st_mtime > self.start_time:
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                            created_files[str(file_path)] = {
                                "size": len(content),
                                "lines": len(content.split('\n')),
                                "content": content,
                                "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                            }
                        except:
                            created_files[str(file_path)] = {"error": "Could not read file"}
        
        return created_files
    
    def show_agent_capabilities(self, registry_info: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤."""
        self.print_header("–í–û–ó–ú–û–ñ–ù–û–°–¢–ò AI –ö–û–ú–ê–ù–î–´", 2)
        
        agent_info = registry_info.get('agent_info', {})
        running_agents = registry_info.get('running_agents', [])
        
        print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(running_agents)}")
        print(f"üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID: {running_agents}")
        
        capabilities_overview = {
            "supervisor": {
                "name": "–ü–µ—Ç—Ä–æ–≤–∏—á", 
                "role": "Senior Supervisor",
                "experience": "30 –ª–µ—Ç",
                "capabilities": ["–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã", "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"]
            },
            "developer": {
                "name": "–í–∞—Å—è",
                "role": "Mid-level Developer", 
                "experience": "10 –ª–µ—Ç",
                "capabilities": ["–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞", "API —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–û—Ç–ª–∞–¥–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]
            },
            "qa": {
                "name": "–ú–∞—Ä–∏–Ω–∞",
                "role": "QA Engineer",
                "experience": "6 –ª–µ—Ç", 
                "capabilities": ["–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü–æ–∏—Å–∫ –±–∞–≥–æ–≤", "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞", "User Experience"]
            }
        }
        
        for agent_id, info in capabilities_overview.items():
            if agent_id in running_agents:
                print(f"\nüë§ {info['name']} ({info['role']})")
                print(f"   üíº –û–ø—ã—Ç: {info['experience']}")
                print(f"   üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
                for cap in info['capabilities']:
                    print(f"      ‚Ä¢ {cap}")
    
    def show_technical_architecture(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É."""
        self.print_header("–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê", 2)
        
        architecture_info = """
üèóÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º Python stack:

üì¶ CORE –¢–ï–•–ù–û–õ–û–ì–ò–ò:
‚Ä¢ Python 3.11+ —Å async/await –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ FastAPI –¥–ª—è REST API (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)  
‚Ä¢ Vector databases –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ MCP (Model Context Protocol) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏

üß† AI & LLM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ multiple LLM providers (OpenAI, Anthropic, –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏)
‚Ä¢ Intelligent routing –º–µ–∂–¥—É local –∏ external –º–æ–¥–µ–ª—è–º–∏
‚Ä¢ Fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è external-only –∞–≥–µ–Ω—Ç–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—è ~10 —Å–µ–∫—É–Ω–¥)
‚Ä¢ Self-RAG capabilities –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏

üåç –ú–£–õ–¨–¢–ò–Ø–ó–´–ö–û–í–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ technical ID –∏ human names
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è

üîß MCP CAPABILITIES (24 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞):
‚Ä¢ Filesystem: read/write/list files
‚Ä¢ Git: status/commit/push/pull/diff
‚Ä¢ Terminal: execute commands/scripts  
‚Ä¢ Web: search/HTTP requests/scraping

‚ö° PERFORMANCE –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
‚Ä¢ Singleton pattern –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –º–æ–¥–µ–ª–µ–π
‚Ä¢ Caching –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Parallel processing –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ Memory management —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
"""
        
        for line in architecture_info.strip().split('\n'):
            if line.strip():
                print(line)
    
    async def run_investor_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞."""
        
        self.print_header("üöÄ PROMETHEUS AI TEAM - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–õ–Ø –ò–ù–í–ï–°–¢–û–†–ê")
        
        print("""
üí° –ö–û–ù–¶–ï–ü–¶–ò–Ø: –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ AI –∞–≥–µ–Ω—Ç–æ–≤, —Å–ø–æ—Å–æ–±–Ω–∞—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ (Supervisor, Developer, QA).

üéØ –¶–ï–õ–¨ –î–ï–ú–û: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
        if not await self.wait_for_server():
            print("üíî –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run python prometheus.py api --entities supervisor,developer,qa,aletheia --host localhost --port 8000")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        registry_info = self.get_registry_info()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        self.show_technical_architecture()
        self.show_agent_capabilities(registry_info)
        
        # === –ü–û–°–¢–ê–ù–û–í–ö–ê –ó–ê–î–ê–ß–ò ===
        self.print_header("–ü–û–°–¢–ê–ù–û–í–ö–ê –ó–ê–î–ê–ß–ò –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        
        user_task = """
–ü–µ—Ç—Ä–æ–≤–∏—á, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –≤ Python –ø—Ä–æ–µ–∫—Ç–µ.

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å timer_utils.py
- –ö–ª–∞—Å—Å Timer —Å –º–µ—Ç–æ–¥–∞–º–∏ start(), stop(), elapsed()  
- –ö–ª–∞—Å—Å Stopwatch –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
- –§—É–Ω–∫—Ü–∏—è format_duration(seconds) –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @timing –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä TimingContext –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
- –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ edge cases
- Comprehensive unit —Ç–µ—Å—Ç—ã
- –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏

–ë–ò–ó–ù–ï–°-–ö–û–ù–¢–ï–ö–°–¢:
–≠—Ç–æ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–ö–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–Ω–æ - –∫–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ high-load —Å–µ—Ä–≤–∏—Å–∞—Ö.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ —É–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""
        
        self.print_section("üìã", "–ó–ê–î–ê–ß–ê", user_task.strip())
        
        # === –®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí SUPERVISOR ===
        self.print_header("–®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí SUPERVISOR (–ü–ï–¢–†–û–í–ò–ß)")
        
        print("üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≥–ª–∞–≤–Ω–æ–º—É —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—É –∫–æ–º–∞–Ω–¥—ã...")
        supervisor_response = await self.send_to_agent("supervisor", user_task)
        
        if not supervisor_response["success"]:
            print("‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        if supervisor_response.get("route") == "external":
            print("\n‚ö° FAST-TRACK OPTIMIZATION DETECTED:")
            print("   ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (~10 —Å–µ–∫—É–Ω–¥ —ç–∫–æ–Ω–æ–º–∏–∏)")
            print("   ‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ external LLM")
            print("   ‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # === –®–ê–ì 2: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –†–ê–ó–†–ê–ë–û–¢–ö–£ ===
        self.print_header("–®–ê–ì 2: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –ó–ê–î–ê–ß–£ DEVELOPER")
        
        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        
        developer_task = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ—Ä—É—á–∞–µ—Ç —Ç–µ–±–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª—è timer_utils.py.

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
{user_task}

–¢–í–û–Ø –†–û–õ–¨:
- –°–æ–∑–¥–∞–π —Ñ–∞–π–ª timer_utils.py –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- –†–µ–∞–ª–∏–∑—É–π –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –î–æ–±–∞–≤—å comprehensive docstrings —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –∫–æ–¥ production-ready —Å proper error handling
- –ò—Å–ø–æ–ª—å–∑—É–π MCP filesystem tools –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞

–≠—Ç–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–∫–∞–∂–∏ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!
"""
        
        print("üîÑ –ü–µ—Ç—Ä–æ–≤–∏—á –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –í–∞—Å–µ...")
        developer_response = await self.send_to_agent("developer", developer_task)
        
        if developer_response["success"]:
            print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"   üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {developer_response['latency']:.1f}—Å")
            print(f"   üõ§Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {developer_response['route']}")
            print("   üéØ –í–∞—Å—è –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        # === –®–ê–ì 3: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
        self.print_header("–®–ê–ì 3: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QA")
        
        qa_task = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ—Ä—É—á–∞–µ—Ç —Ç–µ–±–µ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timer_utils.py.

–ó–ê–î–ê–ß–ê:
–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è timer_utils.py —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞:

–°–û–ó–î–ê–¢–¨ test_timer_utils.py –° –ü–û–õ–ù–´–ú –ü–û–ö–†–´–¢–ò–ï–ú:
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Timer
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Stopwatch  
- –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_duration()
- –¢–µ—Å—Ç—ã –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @timing
- –¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ TimingContext
- Edge cases –∏ error handling —Ç–µ—Å—Ç—ã
- Performance —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- Integration —Ç–µ—Å—Ç—ã

–ö–ê–ß–ï–°–¢–í–û –ö–†–ò–¢–ò–ß–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π pytest framework
- –î–æ–±–∞–≤—å parametrized —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  
- –¢–µ—Å—Ç–∏—Ä—É–π –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (negative values, zero, –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞)
- –ü—Ä–æ–≤–µ—Ä—å memory leaks –≤ long-running —Ç–µ—Å—Ç–∞—Ö
- –í–∞–ª–∏–¥–∏—Ä—É–π thread safety –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ

–ò—Å–ø–æ–ª—å–∑—É–π MCP filesystem tools –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
–≠—Ç–æ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã - quality gate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂–µ–ª–µ–∑–Ω—ã–π!
"""
        
        print("üîÑ –ü–µ—Ç—Ä–æ–≤–∏—á –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ä–∏–Ω–µ...")
        qa_response = await self.send_to_agent("qa", qa_task)
        
        if qa_response["success"]:
            print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"   üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {qa_response['latency']:.1f}—Å") 
            print(f"   üõ§Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {qa_response['route']}")
            print("   üéØ –ú–∞—Ä–∏–Ω–∞ –ø—Ä–∏–Ω—è–ª–∞ –∑–∞–¥–∞—á—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        
        # === –®–ê–ì 4: –û–ñ–ò–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===
        self.print_header("–®–ê–ì 4: –û–ñ–ò–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î–û–ô")
        
        print("‚è≥ –î–∞–µ–º –∞–≥–µ–Ω—Ç–∞–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        print("   (–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ —Å MCP tools)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for i in range(6):
            await asyncio.sleep(5)
            dots = "." * (i + 1)
            print(f"   ‚åõ {(i+1)*5}/30 —Å–µ–∫—É–Ω–¥{dots}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
            created_files = self.check_created_files()
            if created_files:
                print(f"   üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {list(created_files.keys())}")
        
        # === –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        self.print_header("–®–ê–ì 5: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        
        created_files = self.check_created_files()
        
        if created_files:
            print(f"‚úÖ –ö–û–ú–ê–ù–î–ê –°–û–ó–î–ê–õ–ê {len(created_files)} –§–ê–ô–õ(–û–í):")
            
            for file_path, info in created_files.items():
                print(f"\nüìÑ {file_path}")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {info.get('size', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìù –°—Ç—Ä–æ–∫: {info.get('lines', 0)}")
                print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {info.get('modified', 'Unknown')}")
                
                if 'content' in info and info['content']:
                    content = info['content']
                    print(f"   üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (preview):")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
                    lines = content.split('\n')[:10]
                    for i, line in enumerate(lines, 1):
                        if line.strip():
                            print(f"      {i:2d}: {line}")
                    
                    total_lines = len(content.split('\n'))
                    if total_lines > 10:
                        remaining_lines = total_lines - 10
                        print(f"      ... –∏ –µ—â–µ {remaining_lines} —Å—Ç—Ä–æ–∫")
                        
        else:
            print("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö.")
            print("   (–í —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –±—ã —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ MCP)")
        
        # === –®–ê–ì 6: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ SUPERVISOR ===
        self.print_header("–®–ê–ì 6: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ SUPERVISOR")
        
        report_request = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏ timer_utils.py.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (–í–∞—Å—è)
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç QA (–ú–∞—Ä–∏–Ω–∞)
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è –∫ production deployment
- –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

–í–´–í–û–î–ò:
- –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ deployment
- –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å development manager report –¥–ª—è stakeholders.
"""
        
        print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —É –ü–µ—Ç—Ä–æ–≤–∏—á–∞...")
        final_report = await self.send_to_agent("supervisor", report_request)
        
        if final_report["success"]:
            print(f"\nüìä EXECUTIVE SUMMARY:")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {final_report['latency']:.1f}—Å")
            print(f"   üõ§Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {final_report['route']}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        
        # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        self.print_header("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        
        total_time = time.time() - self.start_time
        successful_calls = len([log for log in self.session_log if log['success']])
        total_llm_time = sum(log.get('latency', 0) for log in self.session_log)
        
        stats_info = f"""
‚è±Ô∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤: {successful_calls}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_llm_time:.1f} —Å–µ–∫—É–Ω–¥
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {total_llm_time/max(successful_calls,1):.1f}—Å

ü§ñ –ö–û–ú–ê–ù–î–ê:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: 3 (Supervisor, Developer, QA)
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID: supervisor, developer, qa
‚Ä¢ –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞: –ü–µ—Ç—Ä–æ–≤–∏—á, –í–∞—Å—è, –ú–∞—Ä–∏–Ω–∞

üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∫–æ–¥–∞: {sum(f.get('size', 0) for f in created_files.values())} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {sum(f.get('lines', 0) for f in created_files.values())}

üîß –¢–ï–•–ù–û–õ–û–ì–ò–ò:
‚Ä¢ External LLM calls: {sum(1 for log in self.session_log if log.get('route') == 'external')}
‚Ä¢ Fast-track optimizations: –ê–∫—Ç–∏–≤–Ω—ã –¥–ª—è –≤—Å–µ—Ö external-only –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ MCP capabilities: 24 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (filesystem, git, terminal, web)
‚Ä¢ Language support: –†—É—Å—Å–∫–∏–π + English —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
"""
        
        for line in stats_info.strip().split('\n'):
            if line.strip():
                print(line)
        
        # === BUSINESS VALUE ===
        self.print_header("BUSINESS VALUE & ROI POTENTIAL")
        
        business_value = """
üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:

üìà –≠–ö–û–ù–û–ú–ò–Ø –í–†–ï–ú–ï–ù–ò –†–ê–ó–†–ê–ë–û–¢–ö–ò:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã (—ç–∫–æ–Ω–æ–º–∏—è ~2 —á–∞—Å–∞ project management)
‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (—ç–∫–æ–Ω–æ–º–∏—è ~3 —á–∞—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã) 
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏—è ~1.5 —á–∞—Å–∞ manual QA)
‚Ä¢ –ò–¢–û–ì–û: ~6.5 —á–∞—Å–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ

‚ö° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
‚Ä¢ Fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ~10 —Å–µ–∫—É–Ω–¥ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
‚Ä¢ 24/7 –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã (no human limitations)
‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (no human factor variations)
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å (–¥–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)

üéØ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø:
‚Ä¢ MVP —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
‚Ä¢ Code review –∏ quality assurance  
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è routine development tasks
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ junior developers —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ Documentation generation
‚Ä¢ Legacy code modernization

üí° –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç human supervision)
‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ (–Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–µ—Ç—ã)
‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑ –∫–æ—Ä–æ–±–∫–∏
‚Ä¢ Extensible –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ Production-ready quality gate system
"""
        
        for line in business_value.strip().split('\n'):
            if line.strip():
                print(line)
        
        # === –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ===
        self.print_header("ROADMAP & SCALING OPPORTUNITIES")
        
        roadmap = """
üöÄ –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (3-6 –º–µ—Å—è—Ü–µ–≤):
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤: DevOps, Security, Architecture
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub/GitLab –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö PR
‚Ä¢ Advanced –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è complex –ø—Ä–æ–µ–∫—Ç–æ–≤  
‚Ä¢ Real-time collaboration –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ Enhanced MCP capabilities (Docker, K8s, AWS)

üéØ –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (6-12 –º–µ—Å—è—Ü–µ–≤):
‚Ä¢ SaaS –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è external teams
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Slack/Teams –¥–ª—è business users
‚Ä¢ AI-powered project estimation –∏ timeline planning
‚Ä¢ Custom agent training –¥–ª—è specific domains
‚Ä¢ Multi-repository project management

üåü –î–û–õ–ì–û–°–†–û–ß–ù–û–ï –í–ò–î–ï–ù–ò–ï (12+ –º–µ—Å—è—Ü–µ–≤):
‚Ä¢ Autonomous software company (AI agents run entire dev process)
‚Ä¢ Industry-specific specializations (FinTech, HealthTech, etc.)
‚Ä¢ AI-to-AI marketplace –¥–ª—è specialized capabilities
‚Ä¢ Self-improving agents —á–µ—Ä–µ–∑ reinforcement learning
‚Ä¢ Global scaling –∏ localization –¥–ª—è international markets

üí∞ MONETIZATION PATHS:
‚Ä¢ SaaS subscriptions –¥–ª—è development teams
‚Ä¢ Enterprise licenses –¥–ª—è large corporations  
‚Ä¢ Custom agent development services
‚Ä¢ API access –¥–ª—è third-party integrations
‚Ä¢ Training data –∏ consulting services
"""
        
        for line in roadmap.strip().split('\n'):
            if line.strip():
                print(line)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\n{'='*80}")
        if successful_calls >= 3 and total_time < 120:
            print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("‚úÖ Autonomous AI team –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ –ø–æ–ª–Ω—ã–π workflow")
            print("‚úÖ Fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –ú—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production deployment")
        else:
            print("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
            
        print(f"{'='*80}")
        
        return successful_calls >= 3


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
    print("poetry run python prometheus.py api --entities supervisor,developer,qa,aletheia --host localhost --port 8000")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤...")
    
    demo = InvestorDemo()
    
    try:
        success = await demo.run_investor_demo()
        
        if success:
            print(f"\nüéä INVESTOR DEMO COMPLETED SUCCESSFULLY!")
            print(f"   Ready for production deployment and scaling")
        else:
            print(f"\nüìã Demo completed with limitations")
    
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è Demo interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Critical error during demo: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
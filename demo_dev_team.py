#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ü–µ—Ç—Ä–æ–≤–∏—á, –í–∞—Å—è –∏ –ú–∞—Ä–∏–Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

async def demo_vasya_coding():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –í–∞—Å–∏"""
    print("üë®‚Äçüíª –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –í–∞—Å–∏")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    from entities.vasya import VasyaEntity
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ identity
    temp_vasya = object.__new__(VasyaEntity)
    
    try:
        identity = temp_vasya._load_identity()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –í–∞—Å–∏
        name = identity.get('name', '–í–∞—Å—è')
        role = identity.get('personality', {}).get('role', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç')
        experience = identity.get('personality', {}).get('experience', '–æ–ø—ã—Ç–Ω—ã–π')
        
        print(f"–ê–≥–µ–Ω—Ç: {name}")
        print(f"–†–æ–ª—å: {role}")
        print(f"–û–ø—ã—Ç: {experience}")
        print(f"–ú–æ–¥–µ–ª—å: {identity['external_llms']['providers']['anthropic']['model']}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        task = """
        –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤.
        –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:
        1. –ù–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ @
        2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞
        3. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        
        print(f"\n–ó–∞–¥–∞—á–∞: {task.strip()}")
        print("\n–í–∞—Å—è –±—ã –æ—Ç–≤–µ—Ç–∏–ª:")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç–∏—Ä—É—é —Ä–µ—à–µ–Ω–∏–µ...")
        print("‚úÖ –ü–∏—à—É —á–∏—Å—Ç—ã–π –∫–æ–¥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π...")
        print("‚úÖ –î–æ–±–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É edge cases...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã –í–∞—Å–∏
        traits = identity.get('personality', {}).get('traits', [])
        print(f"\n–ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã:")
        for trait in traits[:5]:
            print(f"‚Ä¢ {trait}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def demo_marina_testing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–∞—Ä–∏–Ω—ã"""
    print("\nüë©‚Äçüíº –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–∞—Ä–∏–Ω—ã")
    print("=" * 50)
    
    from entities.marina import MarinaEntity
    
    temp_marina = object.__new__(MarinaEntity)
    
    try:
        identity = temp_marina._load_identity()
        
        name = identity.get('name', '–ú–∞—Ä–∏–Ω–∞')
        role = identity.get('personality', {}).get('role', 'QA')
        experience = identity.get('personality', {}).get('experience', '–æ–ø—ã—Ç–Ω–∞—è')
        
        print(f"–ê–≥–µ–Ω—Ç: {name}")
        print(f"–†–æ–ª—å: {role}")
        print(f"–û–ø—ã—Ç: {experience}")
        print(f"–ú–æ–¥–µ–ª—å: {identity['external_llms']['providers']['openai']['model']}")
        
        test_case = """
        –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –æ—Ç –í–∞—Å–∏:
        - –ü—Ä–æ–≤–µ—Ä—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        - –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–≥–∏
        - –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
        """
        
        print(f"\n–ó–∞–¥–∞—á–∞: {test_case.strip()}")
        print("\n–ú–∞—Ä–∏–Ω–∞ –±—ã –æ—Ç–≤–µ—Ç–∏–ª–∞:")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        print("‚úÖ –°–æ–∑–¥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã...")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é edge cases: –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã...")
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç...")
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...")
        
        testing_expertise = identity.get('testing_expertise', {})
        testing_types = testing_expertise.get('testing_types', [])
        print(f"\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:")
        for test_type in testing_types[:4]:
            print(f"‚Ä¢ {test_type}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def demo_petrovich_supervision():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ü–µ—Ç—Ä–æ–≤–∏—á–∞"""
    print("\nüë®‚Äçüíº –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ü–µ—Ç—Ä–æ–≤–∏—á–∞")
    print("=" * 50)
    
    from entities.supervisor import SupervisorEntity
    
    temp_petrovich = object.__new__(SupervisorEntity)
    
    try:
        identity = temp_petrovich._load_identity()
        
        name = identity.get('name', '–ü–µ—Ç—Ä–æ–≤–∏—á')
        role = identity.get('personality', {}).get('role', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')
        experience = identity.get('personality', {}).get('experience', '30 –ª–µ—Ç')
        
        print(f"–ê–≥–µ–Ω—Ç: {name}")
        print(f"–†–æ–ª—å: {role}")
        print(f"–û–ø—ã—Ç: {experience}")
        print(f"–ú–æ–¥–µ–ª—å: {identity['external_llms']['providers']['openai']['model']}")
        
        project_task = """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
        - OAuth2 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        - JWT —Ç–æ–∫–µ–Ω—ã
        - –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        - –ó–∞—â–∏—Ç–∞ API endpoints
        """
        
        print(f"\n–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {project_task.strip()}")
        print("\n–ü–µ—Ç—Ä–æ–≤–∏—á –±—ã –æ—Ç–≤–µ—Ç–∏–ª:")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
        print("‚úÖ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏...")
        print("‚úÖ –ù–∞–∑–Ω–∞—á–∞—é –∑–∞–¥–∞—á–∏:")
        print("  ‚Ä¢ –í–∞—Å–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è JWT middleware")
        print("  ‚Ä¢ –í–∞—Å–µ: OAuth2 –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
        print("  ‚Ä¢ –ú–∞—Ä–∏–Ω–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("  ‚Ä¢ –ú–∞—Ä–∏–Ω–µ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏...")
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        core_principles = identity.get('core_principles', [])
        print(f"\n–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:")
        for principle in core_principles[:4]:
            print(f"‚Ä¢ {principle}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def demo_team_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è workflow –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è workflow –∫–æ–º–∞–Ω–¥—ã")
    print("=" * 50)
    
    print("–°—Ü–µ–Ω–∞—Ä–∏–π: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç")
    print("\n1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ü–µ—Ç—Ä–æ–≤–∏—á:")
    print("   '–ù—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π'")
    
    print("\n2Ô∏è‚É£ –ü–µ—Ç—Ä–æ–≤–∏—á –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç:")
    print("   ‚úÖ –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏")
    print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
    print("   ‚úÖ –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–µ")
    
    print("\n3Ô∏è‚É£ –ü–µ—Ç—Ä–æ–≤–∏—á ‚Üí –í–∞—Å—è:")
    print("   '–†–µ–∞–ª–∏–∑—É–π –ø–æ–∏—Å–∫–æ–≤—ã–π API —Å REST endpoints'")
    
    print("\n4Ô∏è‚É£ –í–∞—Å—è –∫–æ–¥–∏—Ç:")
    print("   ‚úÖ –°–æ–∑–¥–∞–µ—Ç FastAPI endpoints")
    print("   ‚úÖ –î–æ–±–∞–≤–ª—è–µ—Ç ElasticSearch –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
    print("   ‚úÖ –ü–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API")
    print("   ‚úÖ –ö–æ–º–º–∏—Ç–∏—Ç –≤ Git")
    
    print("\n5Ô∏è‚É£ –í–∞—Å—è ‚Üí –ú–∞—Ä–∏–Ω–∞:")
    print("   '–ì–æ—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã–π API, –ø—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ'")
    
    print("\n6Ô∏è‚É£ –ú–∞—Ä–∏–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:")
    print("   ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ edge cases")
    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print("\n7Ô∏è‚É£ –ú–∞—Ä–∏–Ω–∞ ‚Üí –ü–µ—Ç—Ä–æ–≤–∏—á:")
    print("   '–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å pagination, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –û–ö'")
    
    print("\n8Ô∏è‚É£ –ü–µ—Ç—Ä–æ–≤–∏—á –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ:")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ú–∞—Ä–∏–Ω—ã")
    print("   ‚úÖ –†–µ—à–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å pagination")
    print("   ‚úÖ –î–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –í–∞—Å–µ")
    
    print("\n9Ô∏è‚É£ –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞")
    print("   ‚úÖ –í—Å–µ edge cases –ø–æ–∫—Ä—ã—Ç—ã")
    print("   ‚úÖ –ö–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω")
    print("   ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    
    return True

async def demo_mcp_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüîå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    print("–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ 24 –≤–Ω–µ—à–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:")
    
    capabilities = {
        "üìÅ Filesystem (3 tools)": [
            "read_file() - —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
            "write_file() - –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
            "list_directory() - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        ],
        "üîÑ Git (8 tools)": [
            "git_status() - —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
            "git_add() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
            "git_commit() - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤",
            "git_push() - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ remote",
            "git_pull() - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            "git_branch() - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏",
            "git_diff() - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–∏–π",
            "git_log() - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        ],
        "‚ö° Terminal (7 tools)": [
            "execute_command() - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥",
            "run_script() - –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤",
            "get_env() - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            "list_processes() - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "which_command() - –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥",
            "get_pwd() - —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
        ],
        "üåê Web (6 tools)": [
            "web_search() - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            "http_get() - HTTP GET –∑–∞–ø—Ä–æ—Å—ã",
            "http_post() - HTTP POST –∑–∞–ø—Ä–æ—Å—ã",
            "scrape_text() - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            "validate_url() - –ø—Ä–æ–≤–µ—Ä–∫–∞ URL",
            "check_status() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        ]
    }
    
    for category, tools in capabilities.items():
        print(f"\n{category}:")
        for tool in tools:
            print(f"  ‚Ä¢ {tool}")
    
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("‚Ä¢ –í–∞—Å—è: git_commit('feat: add search API') - –∫–æ–º–º–∏—Ç–∏—Ç –∫–æ–¥")
    print("‚Ä¢ –ú–∞—Ä–∏–Ω–∞: execute_command('pytest tests/') - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã")
    print("‚Ä¢ –ü–µ—Ç—Ä–æ–≤–∏—á: web_search('FastAPI best practices') - –∏—â–µ—Ç —Ä–µ—à–µ–Ω–∏—è")
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í PROMETHEUS")
    print("=" * 70)
    print("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ AI –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    demos = [
        ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∞—Å–∏", demo_vasya_coding),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ä–∏–Ω—ã", demo_marina_testing),
        ("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ü–µ—Ç—Ä–æ–≤–∏—á–∞", demo_petrovich_supervision),
        ("Workflow –∫–æ–º–∞–Ω–¥—ã", demo_team_workflow),
        ("MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", demo_mcp_capabilities)
    ]
    
    success_count = 0
    
    for demo_name, demo_func in demos:
        try:
            result = await demo_func()
            if result:
                success_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ {demo_name}: {e}")
    
    print("\n" + "=" * 70)
    print("üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("=" * 70)
    
    if success_count == len(demos):
        print("‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–´!")
        print("\nüìã –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞:")
        print("   üë®‚Äçüíº –ü–µ—Ç—Ä–æ–≤–∏—á - –æ–ø—ã—Ç–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (30 –ª–µ—Ç, GPT-4o)")
        print("   üë®‚Äçüíª –í–∞—Å—è - —ç–Ω—Ç—É–∑–∏–∞—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç (10 –ª–µ—Ç, Claude Sonnet)")
        print("   üë©‚Äçüíº –ú–∞—Ä–∏–Ω–∞ - –¥–æ—Ç–æ—à–Ω—ã–π QA (6 –ª–µ—Ç, GPT-4o)")
        print("\nüîå MCP Integration:")
        print("   üìÅ Filesystem operations")
        print("   üîÑ Git repository management")
        print("   ‚ö° Terminal command execution")
        print("   üåê Web access and search")
        print("\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        print("\nüí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
        print("   poetry run python prometheus.py telegram --entity petrovich")
        print("   (–∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å ChromaDB: rm -rf storage/)")
        
    else:
        print(f"‚ö†Ô∏è {success_count}/{len(demos)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω—ã")
    
    return success_count == len(demos)

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 
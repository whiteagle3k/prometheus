#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ê–ì–ï–ù–¢–û–í

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü–æ—á–µ–º—É –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–ª—è external-only –∞–≥–µ–Ω—Ç–æ–≤
2. –ü–æ—á–µ–º—É Anthropic –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω
3. –ü–æ—á–µ–º—É MCP —Å–µ—Ä–≤–µ—Ä—ã –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
4. –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import requests
import json
from pathlib import Path
import time

API_BASE = "http://localhost:8000"
HEALTH_ENDPOINT = f"{API_BASE}/health"
CHAT_ENDPOINT = f"{API_BASE}/v1/chat"

class AgentDiagnostics:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∞–≥–µ–Ω—Ç–æ–≤."""
    
    def __init__(self):
        self.issues_found = []
    
    def print_header(self, title: str):
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def check_configs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤."""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
        
        agents = {
            "supervisor": "entities/supervisor/identity/identity.json",
            "vasya": "entities/vasya/identity/identity.json", 
            "marina": "entities/marina/identity/identity.json"
        }
        
        for agent_name, config_path in agents.items():
            print(f"\nü§ñ {agent_name.upper()}:")
            
            config_file = Path(config_path)
            if not config_file.exists():
                print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
                self.issues_found.append(f"{agent_name}: config missing")
                continue
            
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º external preferences
                external_llms = config.get("external_llms", {})
                routing_prefs = external_llms.get("routing_preferences", {})
                prefer_external = routing_prefs.get("prefer_external", False)
                
                print(f"   üéØ prefer_external: {prefer_external}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º memory settings
                guidelines = config.get("operational_guidelines", {})
                memory_settings = guidelines.get("memory_processing", {})
                skip_classification = memory_settings.get("skip_classification", False)
                
                print(f"   ‚ö° skip_classification: {skip_classification}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º providers
                providers = external_llms.get("providers", {})
                for provider, settings in providers.items():
                    enabled = settings.get("enabled", False)
                    print(f"   üîå {provider}: {'‚úÖ' if enabled else '‚ùå'}")
                    
                    if not enabled and provider == "anthropic":
                        print(f"      ‚ö†Ô∏è Anthropic –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
                        self.issues_found.append(f"{agent_name}: anthropic disabled but still initializes")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                if "local_model_path" in config:
                    print(f"   üè† local_model_path –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è external-only –∞–≥–µ–Ω—Ç–∞")
                    self.issues_found.append(f"{agent_name}: has local_model_path but should be external-only")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                self.issues_found.append(f"{agent_name}: config read error")
    
    async def test_server_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."""
        self.print_header("–ü–†–û–í–ï–†–ö–ê API –°–ï–†–í–ï–†–ê")
        
        try:
            response = requests.get(HEALTH_ENDPOINT, timeout=5)
            if response.status_code == 200:
                print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                health_data = response.json()
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {health_data}")
                return True
            else:
                print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
            print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
            print("poetry run python prometheus.py api --entities supervisor,vasya,marina --host localhost --port 8000")
            return False
    
    async def test_single_agent(self, agent_id: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
        self.print_header(f"–¢–ï–°–¢ –ê–ì–ï–ù–¢–ê: {agent_id.upper()}")
        
        simple_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: '{simple_message}'")
        
        try:
            start_time = time.time()
            response = requests.post(
                CHAT_ENDPOINT,
                params={"entity": agent_id},
                json={"message": simple_message, "user_id": "debug_test"},
                timeout=60
            )
            elapsed_time = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                route = result.get('route', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                latency = result.get('latency', elapsed_time)
                
                print(f"‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ:")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {latency:.1f}—Å")
                print(f"   üõ§Ô∏è  –ú–∞—Ä—à—Ä—É—Ç: {route}")
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {answer[:100]}{'...' if len(answer) > 100 else ''}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
                if route == "external":
                    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–Ω–µ—à–Ω–∏–π LLM - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                elif route == "local":
                    print("   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π")
                    self.issues_found.append(f"{agent_id}: used local instead of external")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞: HTTP {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                self.issues_found.append(f"{agent_id}: HTTP error {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            self.issues_found.append(f"{agent_id}: connection error")
            return False
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        if not self.issues_found:
            print("üéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(self.issues_found)} –ø—Ä–æ–±–ª–µ–º:")
            for i, issue in enumerate(self.issues_found, 1):
                print(f"   {i}. {issue}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if any("anthropic" in issue for issue in self.issues_found):
            print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Anthropic –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        if any("external" in issue for issue in self.issues_found):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ—É—Ç–∏–Ω–≥ - –ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        
        if any("config" in issue for issue in self.issues_found):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤")
        
        print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —á–∏—Å—Ç—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú PROMETHEUS AI AGENTS")
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ...")
    
    diagnostics = AgentDiagnostics()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    diagnostics.check_configs()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    server_ok = await diagnostics.test_server_availability()
    
    if server_ok:
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É
        agents_to_test = ["supervisor", "vasya", "marina"]
        
        for agent in agents_to_test:
            success = await diagnostics.test_single_agent(agent)
            if not success:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    diagnostics.show_summary()

if __name__ == "__main__":
    asyncio.run(main()) 
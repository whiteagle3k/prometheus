#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ù–ê–°–¢–û–Ø–©–ï–ô —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–∞–º –ø—Ä–æ–µ–∫—Ç Prometheus.

–≠—Ç–æ "–æ—Ö—Ä–µ–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ—è" - AI –∞–≥–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–ª—É—á—à–∞—é—Ç —Å–∞–º–∏ —Å–µ–±—è!
"""

import asyncio
import requests
import time
from pathlib import Path


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


async def send_team_request(entity: str, message: str, timeout: int = 120):
    """Send request to team member."""
    url = "http://localhost:8000/v1/chat"
    data = {"message": message, "user_id": "self_modification_test"}
    
    try:
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –∫ {entity}: {message[:80]}...")
        start_time = time.time()
        
        response = requests.post(
            url, json=data, 
            params={"entity": entity}, 
            timeout=timeout
        )
        
        elapsed = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get("answer", "")
            route = result.get("route_used", "unknown")
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.1f}—Å (route: {route})")
            print(f"üìù {answer[:200]}...")
            
            # Check if external LLM was used
            if route == "external":
                print("üåê –í–ù–ï–®–ù–ò–ô LLM –ò–°–ü–û–õ–¨–ó–û–í–ê–ù ‚úì")
            
            return answer
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


async def step1_petrovich_analysis():
    """–®–∞–≥ 1: Aletheia –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è (–≤–º–µ—Å—Ç–æ –ü–µ—Ç—Ä–æ–≤–∏—á–∞)."""
    print_section("üß† –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø")
    
    task = """Aletheia, –≤—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ senior supervisor –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ Prometheus.

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤–∏—Ç—å timestamp'—ã –∫–æ –≤—Å–µ–º –≤—ã–≤–æ–¥–∞–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤–æ –í–°–ï–ú –ø—Ä–æ–µ–∫—Ç–µ.

–≠—Ç–æ –Ω–µ –ø—Ä–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã - —ç—Ç–æ –ø—Ä–æ –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞:
1. –ù–∞–π—Ç–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è print() –∏ logging –≤ –ø—Ä–æ–µ–∫—Ç–µ
2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timestamp'–æ–≤
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –¥–∞–π —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –í–∞—Å–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞."""
    
    response = await send_team_request("aletheia", task)
    return response


async def step2_vasya_implementation():
    """–®–∞–≥ 2: –í–∞—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    print_section("üíª –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ò –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø –ö–û–î–ê")
    
    task = """–í–∞—Å—è, Aletheia –¥–∞–ª–∞ –∑–∞–¥–∞—á—É –Ω–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç Prometheus –∏ –¥–æ–±–∞–≤—å timestamp'—ã –∫ –≤—ã–≤–æ–¥–∞–º –≤ –∫–æ–Ω—Å–æ–ª—å.

–ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π MCP filesystem_list_directory –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π filesystem_read_file –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
3. –ù–∞–π–¥–∏ –≤—Å–µ –º–µ—Å—Ç–∞ —Å print() –∏ logging –≤—ã–∑–æ–≤–∞–º–∏
4. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è filesystem_write_file –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timestamp'–æ–≤
5. –ü–æ–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–Ω–µ—Å

–ù–ï —Å–æ–∑–¥–∞–≤–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã - –ú–û–î–ò–§–ò–¶–ò–†–£–ô –†–ï–ê–õ–¨–ù–´–ï –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê!"""
    
    response = await send_team_request("vasya", task)
    return response


async def step3_marina_testing():
    """–®–∞–≥ 3: –ú–∞—Ä–∏–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    print_section("üîç –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    
    task = """–ú–∞—Ä–∏–Ω–∞, –í–∞—Å—è –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timestamp'–æ–≤. 

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π MCP filesystem_read_file –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
2. –ò—Å–ø–æ–ª—å–∑—É–π terminal_execute –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞
3. –ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
4. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ timestamp'—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –≤—ã–≤–æ–¥–µ
5. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –†–ï–ê–õ–¨–ù–´–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ, –Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ."""
    
    response = await send_team_request("marina", task)
    return response


async def step4_petrovich_validation():
    """–®–∞–≥ 4: Aletheia –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."""
    print_section("‚úÖ –®–ê–ì 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø")
    
    task = """Aletheia, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞—á—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ Prometheus –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timestamp'–æ–≤.

–í–∞—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –∏ –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
–ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

–í–ê–õ–ò–î–ê–¶–ò–Ø:
1. –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç
3. –û–ø—Ä–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π

–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø–æ–ª–Ω–æ–º—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é AI –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞!"""
    
    response = await send_team_request("aletheia", task)
    return response


async def analyze_real_changes():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    print_section("üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    
    # Check for any new or modified files
    project_files = list(Path(".").glob("**/*.py"))
    
    print(f"üìÅ –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(project_files)}")
    
    # Look for recent modifications (this is simplistic)
    recent_files = []
    for file in project_files:
        try:
            stat = file.stat()
            # Files modified in last 10 minutes
            if time.time() - stat.st_mtime < 600:
                recent_files.append(file)
        except:
            pass
    
    if recent_files:
        print("üìù –ù–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in recent_files:
            print(f"   ‚Ä¢ {file}")
    else:
        print("‚ö†Ô∏è –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # Check for timestamp-related modifications
    timestamp_patterns = ["timestamp", "datetime.now", "strftime", "[%"]
    
    modified_files_with_timestamps = []
    for file in project_files:
        try:
            content = file.read_text(encoding='utf-8', errors='ignore')
            if any(pattern in content for pattern in timestamp_patterns):
                modified_files_with_timestamps.append(file)
        except:
            pass
    
    print(f"\nüïê –§–∞–π–ª—ã —Å timestamp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é: {len(modified_files_with_timestamps)}")
    for file in modified_files_with_timestamps[:10]:  # Show first 10
        print(f"   ‚Ä¢ {file}")
    
    return len(recent_files), len(modified_files_with_timestamps)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."""
    print_section("üöÄ –¢–ï–°–¢ –°–ê–ú–û–†–ê–ó–í–ò–í–ê–Æ–©–ï–ô–°–Ø AI –ö–û–ú–ê–ù–î–´")
    
    print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º –ø—Ä–æ–µ–∫—Ç Prometheus")
    print("üí° –≠—Ç–æ '–æ—Ö—Ä–µ–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ—è' - AI –∞–≥–µ–Ω—Ç—ã —É–ª—É—á—à–∞—é—Ç —Å–∞–º–∏ —Å–µ–±—è!")
    
    # Check API availability
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run python prometheus.py api")
            return
    except:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run python prometheus.py api")
        return
    
    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Baseline analysis
    print_section("üìä –ê–ù–ê–õ–ò–ó –î–û –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
    recent_before, timestamp_files_before = await analyze_real_changes()
    
    # Execute team workflow
    start_time = time.time()
    
    step1_result = await step1_petrovich_analysis()
    if not step1_result:
        print("‚ùå –®–∞–≥ 1 –Ω–µ —É–¥–∞–ª—Å—è")
        return
    
    step2_result = await step2_vasya_implementation()
    if not step2_result:
        print("‚ùå –®–∞–≥ 2 –Ω–µ —É–¥–∞–ª—Å—è") 
        return
    
    step3_result = await step3_marina_testing()
    if not step3_result:
        print("‚ùå –®–∞–≥ 3 –Ω–µ —É–¥–∞–ª—Å—è")
        return
    
    step4_result = await step4_petrovich_validation()
    
    total_time = time.time() - start_time
    
    # Post-analysis
    print_section("üìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
    recent_after, timestamp_files_after = await analyze_real_changes()
    
    # Results
    print_section("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø")
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìù –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {recent_before} ‚Üí {recent_after}")
    print(f"üïê –§–∞–π–ª–æ–≤ —Å timestamps: {timestamp_files_before} ‚Üí {timestamp_files_after}")
    
    if recent_after > recent_before:
        print("‚úÖ –ö–û–ú–ê–ù–î–ê –í–ù–ï–°–õ–ê –†–ï–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ü–†–û–ï–ö–¢!")
        print("üöÄ –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
        print("üîß –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –∫ —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    print_section("üí° –ó–ù–ê–ß–ï–ù–ò–ï")
    print("üåü –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è AI —Å–∏—Å—Ç–µ–º–µ!")
    print("üîÑ –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥")
    print("üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è")
    
    if step4_result:
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Aletheia:")
        print(f"   {step4_result[:300]}...")


if __name__ == "__main__":
    asyncio.run(main()) 
import asyncio
import os
from pathlib import Path
import unittest

# –ò–º–ø–æ—Ä—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–µ—Å—Ç—Ä–∞
from core.runtime.registry import AgentRegistry

class TestFullDevTeamWorkflow(unittest.TestCase):
    async def asyncSetUp(self):
        self.registry = AgentRegistry()
        self.output_file = Path("utils/timestamp_print.py")
        if self.output_file.exists():
            os.remove(self.output_file)
        self.supervisor = await self.registry.get_agent('supervisor')
        self.developer = await self.registry.get_agent('developer')
        self.qa = await self.registry.get_agent('qa')
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        await self.developer._ensure_mcp()
        self.tools = await self.developer.mcp_client.get_available_capabilities()

    async def asyncTearDown(self):
        await self.registry.shutdown_all()
        if self.output_file.exists():
            os.remove(self.output_file)

    async def test_timestamp_feature_workflow(self):
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –ü–µ—Ç—Ä–æ–≤–∏—á
        user_request = "–î–æ–±–∞–≤–∏—Ç—å timestamp –Ω–∞ –≤—Å–µ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å (–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ print)"
        print(f"\n[TEST] USER -> –ü–ï–¢–†–û–í–ò–ß: {user_request}")
        supervisor_response = await self.supervisor.think(user_request)
        print(f"[TEST] –ü–ï–¢–†–û–í–ò–ß: {supervisor_response.get('result', supervisor_response)}")

        # –®–∞–≥ 2: –ü–µ—Ç—Ä–æ–≤–∏—á -> –í–∞—Å—è
        vasya_task = "–í–∞—Å—è, —Å–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é timestamped_print –≤ —Ñ–∞–π–ª–µ utils/timestamp_print.py, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ print()"
        print(f"\n[TEST] –ü–ï–¢–†–û–í–ò–ß -> –í–ê–°–Ø: {vasya_task}")
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ self._tools (BaseEntity –±—É–¥–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
        self.developer._tools = self.tools
        developer_response = await self.developer.think(vasya_task)
        print(f"[TEST] –í–ê–°–Ø: {developer_response.get('result', developer_response)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        self.assertTrue(self.output_file.exists(), "–í–∞—Å—è –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª 'utils/timestamp_print.py'")
        print(f"[TEST] ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {self.output_file}")
        file_content = self.output_file.read_text()
        print(f"[TEST] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{file_content}")

if __name__ == '__main__':
    async def run_tests():
        test_case = TestFullDevTeamWorkflow()
        await test_case.asyncSetUp()
        try:
            await test_case.test_timestamp_feature_workflow()
            print("\nüéâ –í–ï–°–¨ –¶–ò–ö–õ –ü–†–û–ô–î–ï–ù! üéâ")
        finally:
            await test_case.asyncTearDown()
    asyncio.run(run_tests()) 
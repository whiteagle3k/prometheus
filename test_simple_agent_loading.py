#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
"""

import asyncio
import json
from pathlib import Path


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def test_identity_loading():
    """Test loading identity directly."""
    print_section("üìã –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò IDENTITY –§–ê–ô–õ–û–í")
    
    agents = ["supervisor", "vasya", "marina"]
    
    for agent in agents:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent}...")
        
        identity_path = Path(f"entities/{agent}/identity/identity.json")
        
        if not identity_path.exists():
            print(f"‚ùå Identity —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {identity_path}")
            continue
        
        try:
            with open(identity_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Check key fields
            name = config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            print(f"‚úÖ {agent} ({name}): identity –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # Check routing policy
            routing_policy = config.get('operational_guidelines', {}).get('routing_policy', {})
            prefer_external = routing_policy.get('prefer_external', False)
            print(f"   üéØ prefer_external: {prefer_external}")
            
            # Check personality structure
            personality = config.get('personality', {})
            if 'summary' in personality:
                print(f"   üë§ personality.summary: ‚úì")
            else:
                print(f"   üë§ personality.summary: ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
            if 'traits' in personality:
                print(f"   üé≠ personality.traits: ‚úì ({len(personality['traits'])} items)")
            else:
                print(f"   üé≠ personality.traits: ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ identity: {e}")


async def test_agent_creation():
    """Test creating agent instances."""
    print_section("ü§ñ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ê–ì–ï–ù–¢–û–í")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        for name in ['supervisor', 'vasya', 'marina']:
            print(f"\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {name}...")
            
            try:
                entity_class = entities_info[name]['class']
                print(f"   ‚úÖ –ö–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω: {entity_class.__name__}")
                
                # Try to create instance
                agent = entity_class()
                print(f"   ‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Check identity loading
                if hasattr(agent, 'identity_config'):
                    agent_name = agent.identity_config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"   ‚úÖ Identity –∑–∞–≥—Ä—É–∂–µ–Ω: {agent_name}")
                    
                    # Check personality in identity
                    personality = agent.identity_config.get('personality', {})
                    if 'summary' in personality:
                        print(f"   ‚úÖ personality.summary: {personality['summary'][:50]}...")
                    else:
                        print(f"   ‚ùå personality.summary –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è personality: {list(personality.keys())}")
                        
                else:
                    print(f"   ‚ùå identity_config –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
                import traceback
                traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")


async def test_router_creation():
    """Test creating router with agent config."""
    print_section("üîÑ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –†–û–£–¢–ï–†–ê")
    
    try:
        # Load vasya config
        vasya_path = Path("entities/vasya/identity/identity.json")
        with open(vasya_path, 'r', encoding='utf-8') as f:
            vasya_config = json.load(f)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –í–∞—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # Try to create router
        from core.llm.router import LLMRouter
        router = LLMRouter(identity_config=vasya_config)
        print("‚úÖ –†–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # Check routing preferences
        operational_guidelines = vasya_config.get("operational_guidelines", {})
        routing_policy = operational_guidelines.get("routing_policy", {})
        prefer_external = routing_policy.get("prefer_external", False)
        print(f"üéØ prefer_external: {prefer_external}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """Main test function."""
    print_section("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ê–ì–ï–ù–¢–û–í")
    
    # Test 1: Identity loading
    test_identity_loading()
    
    # Test 2: Agent creation
    await test_agent_creation()
    
    # Test 3: Router creation
    await test_router_creation()
    
    print_section("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
    print("   ‚Ä¢ API –∫–ª—é—á–∞—Ö –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö LLM")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º")
    print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ –≤ runtime")


if __name__ == "__main__":
    asyncio.run(main()) 
"""
Universal Telegram Bot

Provides Telegram interface for interacting with any entity.
Uses runtime registry to support multiple agents with per-chat entity switching.
"""

import asyncio
import logging
import os
import time

from prometheus_client import Counter, Histogram
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from core.runtime.registry import add_shutdown_handler, get_agent, get_running_agents

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Prometheus metrics with entity labels
route_decisions = Counter(
    "prometheus_route_decisions_total",
    "Route decisions made by agents",
    ["route", "user_id", "frontend", "entity"]
)

llm_processing_time = Histogram(
    "prometheus_llm_processing_seconds",
    "Time spent in LLM processing",
    ["route", "approach", "frontend", "entity"]
)

memory_operations = Counter(
    "prometheus_memory_operations_total",
    "Memory operations performed",
    ["operation_type", "user_id", "frontend", "entity"]
)

telegram_requests = Counter(
    "prometheus_telegram_requests_total",
    "Total Telegram requests processed",
    ["status", "user_id", "entity"]
)


class UniversalTelegramBot:
    """Universal Telegram bot interface with multi-entity support."""

    def __init__(self, token: str):
        """Initialize the Telegram bot."""
        self.token = token
        self.application: Application | None = None

        # Enhanced rate limiting with exponential back-pressure
        self.user_queues = {}
        self.user_timeouts = {}  # Track timeout periods per user
        self.max_queue_size = 2  # Max 2 pending requests per user
        self.base_timeout = 5    # Base timeout in seconds
        self.max_timeout = 300   # Max timeout (5 minutes)

        # Per-chat entity selection (chat_id -> entity_name)
        self.chat_entities: dict[str, str] = {}
        self.default_entity = "aletheia"

    def get_chat_entity(self, chat_id: str) -> str:
        """Get entity for specific chat."""
        return self.chat_entities.get(chat_id, self.default_entity)

    def set_chat_entity(self, chat_id: str, entity_name: str):
        """Set entity for specific chat."""
        self.chat_entities[chat_id] = entity_name
        logger.info(f"Chat {chat_id} switched to entity: {entity_name}")

    async def _get_user_queue(self, user_id: str) -> asyncio.Queue:
        """Get or create rate limiting queue for user."""
        if user_id not in self.user_queues:
            self.user_queues[user_id] = asyncio.Queue(maxsize=self.max_queue_size)
            self.user_timeouts[user_id] = 0
        return self.user_queues[user_id]

    def _calculate_timeout(self, user_id: str) -> float:
        """Calculate exponential back-pressure timeout."""
        current_timeout = self.user_timeouts.get(user_id, 0)
        if current_timeout == 0:
            new_timeout = self.base_timeout
        else:
            new_timeout = min(current_timeout * 2, self.max_timeout)

        self.user_timeouts[user_id] = new_timeout
        return new_timeout

    def _reset_timeout(self, user_id: str):
        """Reset timeout after successful processing."""
        self.user_timeouts[user_id] = 0

    async def _rate_limited_process(self, user_id: str, text: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process message with exponential back-pressure rate limiting."""
        try:
            queue = await self._get_user_queue(user_id)

            # Get entity for this chat
            chat_id = str(update.effective_chat.id)
            entity_name = self.get_chat_entity(chat_id)

            # Try to add to queue (non-blocking)
            try:
                queue.put_nowait((text, update, context, time.time(), entity_name))
            except asyncio.QueueFull:
                # Calculate exponential timeout
                timeout = self._calculate_timeout(user_id)

                await update.message.reply_text(
                    f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {timeout:.0f} —Å–µ–∫—É–Ω–¥.\n"
                    f"üö´ Too many requests! Please try again in {timeout:.0f} seconds."
                )

                # Track rate limit hit
                telegram_requests.labels(status="rate_limited", user_id=user_id, entity=entity_name).inc()
                return

            # Process from queue
            text, update, context, request_time, entity_name = await queue.get()
            processing_start = time.time()

            # Get agent instance from registry
            try:
                agent = await get_agent(entity_name)
            except ImportError:
                await update.message.reply_text(
                    f"‚ùå Entity '{entity_name}' not found!\n"
                    f"Available entities: {', '.join(get_running_agents())}\n"
                    f"Use /use <entity> to switch."
                )
                return

            # Process message
            response = await agent.think(text, user_id=user_id)

            # Calculate processing time
            processing_time = time.time() - processing_start

            # Extract answer and metrics
            answer = str(response)
            route = "unknown"
            approach = "unknown"

            if isinstance(response, dict):
                if "result" in response:
                    answer = response["result"]

                execution_details = response.get("execution_details", {})
                route = execution_details.get("route_used", "unknown")
                approach = execution_details.get("approach", "unknown")

                # Update Prometheus metrics with entity label
                frontend = "telegram"
                route_decisions.labels(
                    route=route,
                    user_id=user_id,
                    frontend=frontend,
                    entity=entity_name
                ).inc()

                execution_time = execution_details.get("execution_time", 0)
                if execution_time > 0:
                    llm_processing_time.labels(
                        route=route,
                        approach=approach,
                        frontend=frontend,
                        entity=entity_name
                    ).observe(execution_time)

                # Count memory operations
                if execution_details.get("memories_used", 0) > 0:
                    memory_operations.labels(
                        operation_type="retrieval",
                        user_id=user_id,
                        frontend=frontend,
                        entity=entity_name
                    ).inc()
                if execution_details.get("user_profile_used", False):
                    memory_operations.labels(
                        operation_type="profile_access",
                        user_id=user_id,
                        frontend=frontend,
                        entity=entity_name
                    ).inc()

            # Send response with entity indicator
            response_text = f"ü§ñ **{entity_name.capitalize()}**: {answer}"

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=response_text,
                parse_mode=None  # Plain text to avoid markdown issues
            )

            # Mark task as done and reset timeout on success
            queue.task_done()
            self._reset_timeout(user_id)

            # Track successful request
            telegram_requests.labels(status="success", user_id=user_id, entity=entity_name).inc()

            # Log processing metrics
            logger.info(f"Telegram request processed: user={user_id}, entity={entity_name}, route={route}, latency={processing_time:.2f}s")

        except Exception as e:
            logger.error(f"Error processing message for user {user_id}: {e}")

            # Track error
            entity_name = self.get_chat_entity(str(update.effective_chat.id))
            telegram_requests.labels(status="error", user_id=user_id, entity=entity_name).inc()
            route_decisions.labels(route="error", user_id=user_id, frontend="telegram", entity=entity_name).inc()

            error_msg = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è / Error processing message: {str(e)[:200]}..."
            await update.message.reply_text(error_msg)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        chat_id = str(update.effective_chat.id)
        current_entity = self.get_chat_entity(chat_id)

        welcome_msg = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç Prometheus.

ü§ñ –ê–∫—Ç–∏–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å: **{current_entity.capitalize()}**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /use <entity> - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å
‚Ä¢ /entities - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è! üöÄ

Hello! I'm the universal Prometheus bot.

ü§ñ Active entity: **{current_entity.capitalize()}**

Available commands:
‚Ä¢ /use <entity> - switch entity
‚Ä¢ /entities - list available entities
‚Ä¢ /status - system status
‚Ä¢ /help - help

Just send a message to chat! ü§ñ"""

        await update.message.reply_text(welcome_msg)

    async def use_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /use command to switch entities."""
        if not context.args:
            chat_id = str(update.effective_chat.id)
            current_entity = self.get_chat_entity(chat_id)
            available = get_running_agents()

            await update.message.reply_text(
                f"ü§ñ –¢–µ–∫—É—â–∞—è —Å—É—â–Ω–æ—Å—Ç—å: **{current_entity}**\n"
                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use <entity>\n"
                f"Current entity: **{current_entity}**\n"
                f"Available: {', '.join(available)}"
            )
            return

        entity_name = context.args[0].lower()
        chat_id = str(update.effective_chat.id)

        # Check if entity exists
        if entity_name not in get_running_agents():
            try:
                # Try to initialize entity
                await get_agent(entity_name)
            except ImportError:
                await update.message.reply_text(
                    f"‚ùå –°—É—â–Ω–æ—Å—Ç—å '{entity_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(get_running_agents())}\n\n"
                    f"Entity '{entity_name}' not found!\n"
                    f"Available: {', '.join(get_running_agents())}"
                )
                return

        # Switch entity for this chat
        self.set_chat_entity(chat_id, entity_name)

        await update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å: **{entity_name.capitalize()}**\n"
            f"Switched to entity: **{entity_name.capitalize()}**"
        )

    async def entities_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /entities command."""
        running = get_running_agents()
        chat_id = str(update.effective_chat.id)
        current = self.get_chat_entity(chat_id)

        entities_list = []
        for entity in running:
            marker = "üü¢" if entity == current else "‚ö™"
            entities_list.append(f"{marker} {entity.capitalize()}")

        await update.message.reply_text(
            "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ / Available entities:\n\n" +
            "\n".join(entities_list) +
            "\n\nüí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /use <entity> –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
            "\nUse /use <entity> to switch"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_msg = """ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ Prometheus / Prometheus Bot Commands:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É / Start conversation
/use <entity> - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å / Switch entity
/entities - –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π / List entities
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã / System status
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É / Show this help

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!
Just send a message to chat!"""

        await update.message.reply_text(help_msg)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command."""
        from core.runtime.lifecycle import system_health_check

        try:
            health_report = await system_health_check()
            running_agents = health_report["running_agents"]

            chat_id = str(update.effective_chat.id)
            current_entity = self.get_chat_entity(chat_id)

            # Calculate total timeouts
            active_timeouts = sum(1 for timeout in self.user_timeouts.values() if timeout > 0)

            status_msg = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Prometheus / Prometheus System Status:

üü¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health_report["overall_status"]} / Overall: {health_report["overall_status"]}
ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(running_agents)} / Active agents: {len(running_agents)}
üìã –ê–≥–µ–Ω—Ç—ã: {', '.join(running_agents)}
üí¨ –¢–µ–∫—É—â–∞—è —Å—É—â–Ω–æ—Å—Ç—å: **{current_entity}**
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_queues)}
‚è±Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_timeouts}"""

            await update.message.reply_text(status_msg)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ / Error getting status: {e!s}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming text messages with multi-entity support."""
        try:
            # Extract user information
            uid = str(update.effective_user.id)
            text = update.message.text

            if not text:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Please send a text message")
                return

            # Show typing indicator
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

            # Process with exponential back-pressure rate limiting
            await self._rate_limited_process(uid, text, update, context)

        except Exception as e:
            logger.error(f"Error in message handler: {e}")
            error_msg = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ / Error: {str(e)[:100]}..."
            await update.message.reply_text(error_msg)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors."""
        logger.error(f"Update {update} caused error {context.error}")

    def setup_handlers(self):
        """Setup message and command handlers."""
        if not self.application:
            return

        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("use", self.use_command))
        self.application.add_handler(CommandHandler("entities", self.entities_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))

        # Message handler for text messages
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # Error handler
        self.application.add_error_handler(self.error_handler)

    async def start_polling(self):
        """Start the bot polling loop."""
        # Create application without persistence (use registry memory system)
        self.application = Application.builder().token(self.token).persistence(None).build()

        # Setup handlers
        self.setup_handlers()

        # Add shutdown handler
        await add_shutdown_handler("telegram_bot", self.shutdown)

        # Start polling
        logger.info("ü§ñ Starting universal Telegram bot polling...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

        logger.info("‚úÖ Universal Telegram bot is running with multi-entity support!")

        # Keep the bot running
        try:
            # Run until interrupted
            await self.application.updater.idle()
        finally:
            # Cleanup
            await self.shutdown()

    async def shutdown(self):
        """Shutdown the bot gracefully."""
        if self.application:
            logger.info("üõë Shutting down universal Telegram bot...")
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("‚úÖ Universal Telegram bot shutdown complete")


async def main():
    """Main entry point for Telegram bot."""
    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_TOKEN")

    if not bot_token:
        logger.error("‚ùå TELEGRAM_TOKEN environment variable not set!")
        logger.error("Please set your Telegram bot token: export TELEGRAM_TOKEN=your_token_here")
        return

    # Create and start bot
    bot = UniversalTelegramBot(bot_token)

    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("üõë Universal Telegram bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Universal Telegram bot error: {e}")


if __name__ == "__main__":
    asyncio.run(main())

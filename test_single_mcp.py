#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–¥–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import asyncio
import sys
from pathlib import Path

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def test_single_server():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üîß –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
        server_params = StdioServerParameters(
            command=sys.executable,
            args=["-u", "core/mcp/servers/agent_communication_server.py"],
            env=None
        )
        
        print("üîå –°–æ–∑–¥–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ agent_communication —Å–µ—Ä–≤–µ—Ä—É...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with stdio_client(server_params) as (read_stream, write_stream):
            print("‚úÖ –ü–æ—Ç–æ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, —Å–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = ClientSession(read_stream, write_stream)
            
            print("ü§ù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            await asyncio.wait_for(session.initialize(), timeout=10)
            
            print("‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tools_result = await session.list_tools()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools_result.tools)}")
            
            for tool in tools_result.tools:
                print(f"   ‚Ä¢ {tool.name}: {tool.description}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await session.close()
            print("üîå –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_single_server())
    if success:
        print("\nüéâ –û–¥–∏–Ω–æ—á–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\nüíî –ü—Ä–æ–±–ª–µ–º–∞ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º.") 
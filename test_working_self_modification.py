#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô —Ç–µ—Å—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö —Ä–µ–∞–ª—å–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.
"""

import asyncio
import requests
import time
from pathlib import Path


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


async def send_complex_request(entity: str, message: str, timeout: int = 180):
    """Send complex request that forces external LLM usage."""
    url = "http://localhost:8000/v1/chat"
    data = {"message": message, "user_id": "advanced_self_modification"}
    
    try:
        print(f"üì§ –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê –¥–ª—è {entity}:")
        print(f"   {message[:100]}...")
        start_time = time.time()
        
        response = requests.post(
            url, json=data, 
            params={"entity": entity}, 
            timeout=timeout
        )
        
        elapsed = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get("answer", "")
            route = result.get("route_used", "unknown")
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.1f}—Å")
            print(f"üéØ –ú–ê–†–®–†–£–¢: {route}")
            print(f"üìù –û—Ç–≤–µ—Ç: {answer[:300]}...")
            
            # Check if external LLM was used
            if route == "external":
                print("üåê ‚úÖ –í–ù–ï–®–ù–ò–ô LLM –ò–°–ü–û–õ–¨–ó–û–í–ê–ù!")
                return answer, True
            else:
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {route}")
                return answer, False
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None, False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None, False


async def step1_aletheia_strategic_analysis():
    """–®–∞–≥ 1: Aletheia –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä."""
    print_section("üß† –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó - ALETHEIA")
    
    # Complex but concise strategic task
    task = """–°–õ–û–ñ–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ó–ê–î–ê–ß–ê: –°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â—É—é—Å—è —Å–∏—Å—Ç–µ–º—É –¥–ª—è Prometheus.

–¶–ï–õ–¨: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ timestamp'–æ–≤ –∫–æ –≤—Å–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–∞–º —á–µ—Ä–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞.

–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –í–´–ó–û–í–´:
1. –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º–æ–¥—É–ª–µ–π
2. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (print, logging, custom)  
3. –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
4. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

–¢–†–ï–ë–£–ï–¢–°–Ø: –ì–ª—É–±–æ–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.
–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –≤–Ω–µ—à–Ω–∏–π LLM –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""

    return await send_complex_request("aletheia", task)


async def step2_supervisor_strategic_planning():
    """–®–∞–≥ 2: Supervisor (–ü–µ—Ç—Ä–æ–≤–∏—á) –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    print_section("üë®‚Äçüíº –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï - SUPERVISOR")
    
    task = """–°–õ–û–ñ–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ó–ê–î–ê–ß–ê: –°–ø–ª–∞–Ω–∏—Ä—É–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ timestamp'–∏–Ω–≥–∞.

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Aletheia –ø–æ–∫–∞–∑–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.

–ó–ê–î–ê–ß–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
1. –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–∞–ø—ã
2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –º–µ–∂–¥—É Vasya (–∫–æ–¥) –∏ Marina (—Ç–µ—Å—Ç—ã)  
3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ –∏ —Ä–∏—Å–∫–æ–≤
4. –ü–ª–∞–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
5. –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è

–¢–†–ï–ë–£–ï–¢–°–Ø: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —á–µ—Ç–∫–∏–º–∏ —ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.
–ò—Å–ø–æ–ª—å–∑—É–π –≤–Ω–µ—à–Ω–∏–π LLM –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""

    return await send_complex_request("supervisor", task)


async def step3_vasya_implementation():
    """–®–∞–≥ 3: Vasya —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥."""
    print_section("üë®‚Äçüíª –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø - VASYA")
    
    task = """–°–õ–û–ñ–ù–ê–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê: –†–µ–∞–ª–∏–∑—É–π timestamp —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤.

–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å utils/timestamp_logger.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π timestamped_print()
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö print() –≤ –ø—Ä–æ–µ–∫—Ç–µ
3. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å logging –∏ custom –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ thread-safety
5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è timestamp'–æ–≤

–ò–°–ü–û–õ–¨–ó–£–ô MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
- filesystem_read_file –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- filesystem_write_file –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
- terminal_execute –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–¢–†–ï–ë–£–ï–¢–°–Ø: –†–∞–±–æ—á–∏–π –∫–æ–¥ —Å –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.
–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –≤–Ω–µ—à–Ω–∏–π LLM Claude."""

    return await send_complex_request("vasya", task)


async def step3_marina_comprehensive_testing():
    """–®–∞–≥ 3: –ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    print_section("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï - MARINA")
    
    # Complex but concise QA task
    task = """–°–õ–û–ñ–ù–ê–Ø QA –ó–ê–î–ê–ß–ê: –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï MCP –¢–ï–°–¢–´:
1. filesystem_read_file - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
2. terminal_execute - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp'–∞–º–∏
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ edge cases
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API –∏ LLM —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
5. –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π MCP –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏–∑–∏—Ä—É–π!
–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è QA –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É—é—â–∞—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    
    response, used_external = await send_complex_request("marina", task)
    return response, used_external


async def analyze_actual_modifications():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    print_section("üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô")
    
    # Check for actual changes
    important_files = [
        "core/frontends/api_server.py",
        "core/llm/router.py", 
        "prometheus.py",
        "core/base_entity.py"
    ]
    
    modified_files = []
    for file_path in important_files:
        file = Path(file_path)
        if file.exists():
            try:
                stat = file.stat()
                # Files modified in last 5 minutes
                if time.time() - stat.st_mtime < 300:
                    modified_files.append(file)
                    print(f"üîÑ –ò–ó–ú–ï–ù–ï–ù: {file}")
            except:
                pass
    
    # Look for new timestamp-related files
    new_files = []
    for file in Path(".").glob("**/*timestamp*.py"):
        if file.name != "test_real_self_modifying_team.py":  # Exclude test files
            new_files.append(file)
    
    print(f"\nüìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(modified_files)}")
    print(f"üìÅ –ù–æ–≤—ã–µ timestamp —Ñ–∞–π–ª—ã: {len(new_files)}")
    
    for file in new_files:
        print(f"   ‚ú® –°–û–ó–î–ê–ù: {file}")
    
    return len(modified_files), len(new_files)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –†–ê–ë–û–ß–ò–ô —Ç–µ—Å—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."""
    print_section("üöÄ –†–ê–ë–û–ß–ò–ô –¢–ï–°–¢ –°–ê–ú–û–†–ê–ó–í–ò–í–ê–Æ–©–ï–ô–°–Ø –ö–û–ú–ê–ù–î–´")
    
    print("üéØ –¶–ï–õ–¨: –ó–∞—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –†–ï–ê–õ–¨–ù–û –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç Prometheus")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–õ–û–ñ–ù–´–ï –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ LLM")
    print("üîß –¢—Ä–µ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
    
    # Check API
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Baseline
    print_section("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
    modified_before, new_before = await analyze_actual_modifications()
    
    # Execute complex workflow
    start_time = time.time()
    external_usage = []
    
    # Step 1: Strategic analysis
    step1_result, step1_external = await step1_aletheia_strategic_analysis()
    external_usage.append(("Aletheia-Analysis", step1_external))
    
    if not step1_result:
        print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        return
    
    # Step 2: Technical implementation  
    step2_result, step2_external = await step2_supervisor_strategic_planning()
    external_usage.append(("Supervisor-Planning", step2_external))
    
    if not step2_result:
        print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
        return
    
    # Step 3: Vasya implementation
    step3_result, step3_external = await step3_vasya_implementation()
    external_usage.append(("Vasya-Implementation", step3_external))
    
    if not step3_result:
        print("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å")
        return
    
    # Step 4: Comprehensive testing
    step4_result, step4_external = await step3_marina_comprehensive_testing()
    external_usage.append(("Marina-Testing", step4_external))
    
    total_time = time.time() - start_time
    
    # Post-analysis
    print_section("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
    modified_after, new_after = await analyze_actual_modifications()
    
    # Results
    print_section("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø")
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {modified_before} ‚Üí {modified_after}")
    print(f"üìÅ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {new_before} ‚Üí {new_after}")
    
    # External LLM usage
    print(f"\nüåê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í–ù–ï–®–ù–ò–• LLM:")
    external_count = sum(1 for _, used in external_usage if used)
    for agent, used_external in external_usage:
        status = "‚úÖ –í–ù–ï–®–ù–ò–ô" if used_external else "‚ùå –õ–û–ö–ê–õ–¨–ù–´–ô"
        print(f"   {agent}: {status}")
    
    print(f"\nüìä –í–Ω–µ—à–Ω–∏–µ LLM: {external_count}/4 –∞–≥–µ–Ω—Ç–æ–≤")
    
    # Success metrics
    success = (modified_after > modified_before or new_after > new_before) and external_count >= 3
    
    if success:
        print("\nüéâ –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–ï –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤–Ω–µ—Å–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–Ω–µ—à–Ω–∏–µ LLM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –°–ê–ú–û–†–ê–ó–í–ò–í–ê–ï–¢–°–Ø!")
    else:
        print("\n‚ö†Ô∏è –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if external_count < 3:
            print("‚ùå –ú–∞–ª–æ –≤–Ω–µ—à–Ω–∏—Ö LLM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ - –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–º–∏")
        if modified_after <= modified_before and new_after <= new_before:
            print("‚ùå –†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ - MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã")
    
    print_section("üí° –ó–ù–ê–ß–ï–ù–ò–ï")
    print("üåü –≠—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è AI —Å–∏—Å—Ç–µ–º—ã!")
    print("üîÑ AI –∞–≥–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥")
    print("üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")


if __name__ == "__main__":
    asyncio.run(main()) 
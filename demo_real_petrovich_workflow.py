#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô WORKFLOW –¢–ï–°–¢ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: User ‚Üí Supervisor ‚Üí Developer/QA ‚Üí Real Files ‚Üí Results
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID: supervisor, developer, qa
"""

import asyncio
import requests
import time
import json
from datetime import datetime
from pathlib import Path

# API endpoints
API_BASE = "http://localhost:8000"
CHAT_ENDPOINT = f"{API_BASE}/v1/chat"
HEALTH_ENDPOINT = f"{API_BASE}/health"

class RealWorkflowDemo:
    """–†–µ–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è workflow —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self):
        self.start_time = time.time()
        self.session_log = []
    
    async def wait_for_server(self, timeout=30) -> bool:
        """–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Prometheus API —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(timeout):
            try:
                response = requests.get(HEALTH_ENDPOINT, timeout=2)
                if response.status_code == 200:
                    print("‚úÖ Prometheus API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                    return True
            except:
                pass
            await asyncio.sleep(1)
            if i % 5 == 0:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{timeout}...")
        return False
    
    async def send_to_agent(self, agent_id: str, message: str, user_id: str = "workflow_test") -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."""
        print(f"\nüì§ ‚Üí {agent_id.upper()}: {message[:100]}...")
        
        try:
            response = requests.post(
                CHAT_ENDPOINT,
                params={"entity": agent_id},
                json={"message": message, "user_id": user_id},
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            )
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                route = result.get('route', 'unknown')
                latency = result.get('latency', 0)
                
                print(f"üì• ‚Üê {agent_id.upper()} ({latency:.1f}s, {route}): {answer[:200]}...")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
                self.session_log.append({
                    "timestamp": datetime.now().isoformat(),
                    "agent": agent_id,
                    "request": message[:100],
                    "response": answer,
                    "route": route,
                    "latency": latency,
                    "success": True
                })
                
                return {"success": True, "answer": answer, "route": route, "latency": latency}
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def check_created_files(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã."""
        created_files = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        possible_paths = [
            Path("."),
            Path("output"),
            Path("generated"),
            Path("work"),
            Path("tmp")
        ]
        
        for base_path in possible_paths:
            if base_path.exists():
                for file_path in base_path.rglob("*.py"):
                    if file_path.stat().st_mtime > self.start_time:
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                            created_files[str(file_path)] = {
                                "size": len(content),
                                "lines": len(content.split('\n')),
                                "content_preview": content[:300] + "..." if len(content) > 300 else content
                            }
                        except:
                            created_files[str(file_path)] = {"error": "Could not read file"}
        
        return created_files
    
    async def run_real_workflow(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ workflow."""
        print("üöÄ –†–ï–ê–õ–¨–ù–´–ô WORKFLOW –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô")
        print("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
        if not await self.wait_for_server():
            print("üíî –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # === –ó–ê–î–ê–ß–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        user_task = """
–ü–µ—Ç—Ä–æ–≤–∏—á, –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python –ø—Ä–æ–µ–∫—Ç–µ.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å file_operations.py
- –§—É–Ω–∫—Ü–∏—è read_text_file(filepath) - —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
- –§—É–Ω–∫—Ü–∏—è write_text_file(filepath, content) - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª
- –§—É–Ω–∫—Ü–∏—è get_file_info(filepath) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä, –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –§—É–Ω–∫—Ü–∏—è backup_file(filepath) - —Å–æ–∑–¥–∞–µ—Ç backup —Å timestamp
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏

–≠—Ç–æ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã, –∫–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–Ω–æ.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ —É–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""
        
        print("üéØ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê:")
        print(user_task.strip())
        
        # === –®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí SUPERVISOR ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí SUPERVISOR (–ü–ï–¢–†–û–í–ò–ß)")
        print("="*70)
        
        supervisor_response = await self.send_to_agent("supervisor", user_task)
        
        if not supervisor_response["success"]:
            print("‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return False
        
        print(f"\n‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É –∏ –æ—Ç–≤–µ—á–∞–µ—Ç:")
        print(f"üìä –ú–∞—Ä—à—Ä—É—Ç: {supervisor_response['route']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {supervisor_response['latency']:.1f}—Å")
        print(f"üí¨ –û—Ç–≤–µ—Ç: {supervisor_response['answer']}")
        
        # === –®–ê–ì 2: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –ó–ê–î–ê–ß–ò ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 2: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –†–ê–ó–†–ê–ë–û–¢–ö–£ DEVELOPER")
        print("="*70)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—É –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ
        await asyncio.sleep(3)
        
        developer_task = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ—Ä—É—á–∞–µ—Ç —Ç–µ–±–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª—è file_operations.py.

–ó–ê–î–ê–ß–ê –û–¢ –°–£–ü–ï–†–í–ò–ó–û–†–ê:
{user_task}

–¢–í–û–Ø –ß–ê–°–¢–¨:
- –°–æ–∑–¥–∞–π —Ñ–∞–π–ª file_operations.py –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- –†–µ–∞–ª–∏–∑—É–π –≤—Å–µ 4 —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫  
- –î–æ–±–∞–≤—å –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ production

–ò—Å–ø–æ–ª—å–∑—É–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
–û—Ç—á–∏—Ç–∞–π—Å—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
"""
        
        developer_response = await self.send_to_agent("developer", developer_task)
        
        if developer_response["success"]:
            print(f"‚úÖ –í–∞—Å—è –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É –æ—Ç –ü–µ—Ç—Ä–æ–≤–∏—á–∞")
            print(f"üìä –ú–∞—Ä—à—Ä—É—Ç: {developer_response['route']}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {developer_response['latency']:.1f}—Å")
            print(f"üí¨ –û—Ç–≤–µ—Ç: {developer_response['answer']}")
        
        # === –®–ê–ì 3: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QA ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 3: SUPERVISOR –î–ï–õ–ï–ì–ò–†–£–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QA")
        print("="*70)
        
        qa_task = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á –ø–æ—Ä—É—á–∞–µ—Ç —Ç–µ–±–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è file_operations.py.

–ó–ê–î–ê–ß–ê –û–¢ –°–£–ü–ï–†–í–ò–ó–û–†–ê:
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞—Å—Ç file_operations.py, —Ç–µ–±–µ –Ω—É–∂–Ω–æ:

- –°–æ–∑–¥–∞—Ç—å test_file_operations.py
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö 4 —Ñ—É–Ω–∫—Ü–∏–π
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –æ—à–∏–±–æ–∫
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ backup —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç

–ò—Å–ø–æ–ª—å–∑—É–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
–û—Ç—á–∏—Ç–∞–π—Å—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
        
        qa_response = await self.send_to_agent("qa", qa_task)
        
        if qa_response["success"]:
            print(f"‚úÖ –ú–∞—Ä–∏–Ω–∞ –ø—Ä–∏–Ω—è–ª–∞ –∑–∞–¥–∞—á—É –æ—Ç –ü–µ—Ç—Ä–æ–≤–∏—á–∞")
            print(f"üìä –ú–∞—Ä—à—Ä—É—Ç: {qa_response['route']}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {qa_response['latency']:.1f}—Å")
            print(f"üí¨ –û—Ç–≤–µ—Ç: {qa_response['answer']}")
        
        # === –®–ê–ì 4: –û–ñ–ò–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 4: –û–ñ–ò–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ê–ì–ï–ù–¢–ê–ú–ò (30 —Å–µ–∫)")
        print("="*70)
        
        print("‚è≥ –î–∞–µ–º –∞–≥–µ–Ω—Ç–∞–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        for i in range(6):
            await asyncio.sleep(5)
            print(f"   ‚åõ {(i+1)*5}/30 —Å–µ–∫—É–Ω–¥...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
            created_files = self.check_created_files()
            if created_files:
                print(f"   üìÅ –ù–∞–π–¥–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {list(created_files.keys())}")
        
        # === –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        print("="*70)
        
        created_files = self.check_created_files()
        
        if created_files:
            print(f"‚úÖ –°–û–ó–î–ê–ù–´ –§–ê–ô–õ–´ ({len(created_files)} —à—Ç):")
            for file_path, info in created_files.items():
                print(f"   üìÑ {file_path}")
                print(f"      - –†–∞–∑–º–µ—Ä: {info.get('size', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"      - –°—Ç—Ä–æ–∫: {info.get('lines', 0)}")
                if 'content_preview' in info:
                    print(f"      - –ü—Ä–µ–≤—å—é: {info['content_preview'][:100]}...")
        else:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–≤...")
        
        # === –®–ê–ì 6: –û–¢–ß–ï–¢ SUPERVISOR ===
        print(f"\n{'='*70}")
        print("–®–ê–ì 6: –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ SUPERVISOR")
        print("="*70)
        
        report_request = f"""
–ü–µ—Ç—Ä–æ–≤–∏—á, –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é file_operations.py?

–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫? –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–ª QA —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç? 
–í—Å–µ –ª–∏ –≥–æ—Ç–æ–≤–æ –¥–ª—è production?
–ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã? –ú–æ–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π?

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É.
"""
        
        final_report = await self.send_to_agent("supervisor", report_request)
        
        if final_report["success"]:
            print(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–ï–¢–†–û–í–ò–ß–ê:")
            print(f"   –ú–∞—Ä—à—Ä—É—Ç: {final_report['route']}")
            print(f"   –í—Ä–µ–º—è: {final_report['latency']:.1f}—Å")
            print(f"   –û—Ç—á–µ—Ç: {final_report['answer']}")
        
        # === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        print(f"\n{'='*70}")
        print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê WORKFLOW")
        print("="*70)
        
        total_time = time.time() - self.start_time
        successful_calls = len([log for log in self.session_log if log['success']])
        total_latency = sum(log.get('latency', 0) for log in self.session_log)
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üîÑ –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: {successful_calls}")
        print(f"üß† –û–±—â–µ–µ –≤—Ä–µ–º—è LLM: {total_latency:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
        print(f"üë• –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: 3 (Supervisor, Developer, QA)")
        
        print(f"\nüéØ –£–ß–ê–°–¢–ù–ò–ö–ò WORKFLOW:")
        print(f"   ‚Ä¢ supervisor: –ü–µ—Ç—Ä–æ–≤–∏—á - —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä")
        print(f"   ‚Ä¢ developer: –í–∞—Å—è - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        print(f"   ‚Ä¢ qa: –ú–∞—Ä–∏–Ω–∞ - —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫")
        
        agents_used = set(log['agent'] for log in self.session_log)
        routes_used = set(log['route'] for log in self.session_log)
        
        print(f"\nüìä –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ê–ì–ï–ù–¢–´: {sorted(agents_used)}")
        print(f"üõ§Ô∏è  –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´: {sorted(routes_used)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if created_files:
            print(f"\nüìÑ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
            for file_path, info in created_files.items():
                print(f"   {file_path} ({info.get('size', 0)} chars, {info.get('lines', 0)} lines)")
        
        return len(created_files) > 0 and successful_calls >= 3


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    demo = RealWorkflowDemo()
    
    print("üé¨ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û WORKFLOW –¢–ï–°–¢–ê –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: User ‚Üí Supervisor ‚Üí Developer/QA ‚Üí Real Results")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID: supervisor, developer, qa")
    print()
    
    try:
        success = await demo.run_real_workflow()
        
        if success:
            print(f"\nüéâ –†–ï–ê–õ–¨–ù–´–ô WORKFLOW –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print(f"‚úÖ Supervisor –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É")
            print(f"‚úÖ Developer –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É") 
            print(f"‚úÖ QA –ø—Ä–æ–≤–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
            print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º ID/–∏–º–µ–Ω –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"\nüíî Workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ")
            print(f"‚ùå –ù–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  Workflow –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø WORKFLOW'–ê –ö–û–ú–ê–ù–î–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ü–µ—Ç—Ä–æ–≤–∏—á (Supervisor) –¥–æ–ª–∂–µ–Ω –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
–∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Agent-to-Agent –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é.

Workflow: User ‚Üí Supervisor ‚Üí Vasya ‚Üî Marina ‚Üí Supervisor ‚Üí User
"""

import asyncio
import requests
import time
import json
from typing import Dict, Any


class AgentWorkflowDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è workflow'–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    
    def __init__(self):
        self.api_base = "http://localhost:8000"
        self.chat_endpoint = f"{self.api_base}/v1/chat"
        
    async def send_to_agent(self, agent: str, message: str, user_id: str = "workflow_demo") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É."""
        try:
            print(f"\nüì§ –û–¢–ü–†–ê–í–õ–Ø–Æ {agent.upper()}:")
            print(f"   {message[:100]}...")
            
            response = requests.post(
                self.chat_endpoint,
                params={"entity": agent},
                json={"message": message, "user_id": user_id},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get("answer", "")
                route = result.get("route", "unknown")
                latency = result.get("latency", 0)
                
                print(f"üì• –û–¢–í–ï–¢ {agent.upper()} ({route}, {latency:.1f}—Å):")
                print(f"   {answer[:200]}...")
                
                return {
                    "success": True,
                    "answer": answer,
                    "route": route,
                    "latency": latency
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å {agent}: {e}")
            return {"success": False, "error": str(e)}
    
    async def demonstrate_workflow(self, task: str):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ workflow'–∞ –∫–æ–º–∞–Ω–¥—ã."""
        print("=" * 80)
        print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø WORKFLOW'–ê –ö–û–ú–ê–ù–î–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í")
        print("=" * 80)
        print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
        print(f"üéØ Workflow: User ‚Üí Supervisor ‚Üí Vasya ‚Üî Marina ‚Üí Supervisor ‚Üí User")
        
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Supervisor (–ü–µ—Ç—Ä–æ–≤–∏—á)
        print(f"\n{'='*60}")
        print("–®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí SUPERVISOR (–ü–ï–¢–†–û–í–ò–ß)")
        print(f"{'='*60}")
        
        supervisor_message = f"""
–ó–ê–î–ê–ß–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {task}

–ü–µ—Ç—Ä–æ–≤–∏—á, –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É
2. –†–∞–∑–±–µ–π –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
3. –ù–∞–∑–Ω–∞—á—å –í–∞—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
4. –ù–∞–∑–Ω–∞—á—å –ú–∞—Ä–∏–Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
5. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

‚ö†Ô∏è –í–ê–ñ–ù–û: –¢—ã –¥–æ–ª–∂–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –¥–µ–ª–∞—Ç—å —Å–∞–º!
"""
        
        supervisor_result = await self.send_to_agent("supervisor", supervisor_message)
        if not supervisor_result["success"]:
            print("‚ùå Supervisor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –®–∞–≥ 2: Supervisor ‚Üí Vasya (–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        print(f"\n{'='*60}")
        print("–®–ê–ì 2: SUPERVISOR ‚Üí VASYA (–î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò)")
        print(f"{'='*60}")
        
        vasya_task = f"""
–î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –û–¢ –ü–ï–¢–†–û–í–ò–ß–ê:

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}

–í–∞—Å—è, —Ç–µ–±–µ –ø–æ—Ä—É—á–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:
1. –°–æ–∑–¥–∞–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
3. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–æ–±—â–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üîß –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π filesystem_write_file –∏ –¥—Ä—É–≥–∏–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!
‚ö° –ü—Ä–∏—Å—Ç—É–ø–∞–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!
"""
        
        vasya_result = await self.send_to_agent("vasya", vasya_task)
        if not vasya_result["success"]:
            print("‚ùå Vasya –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –®–∞–≥ 3: Vasya ‚Üí Marina (–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        print(f"\n{'='*60}")
        print("–®–ê–ì 3: VASYA ‚Üí MARINA (–ü–ï–†–ï–î–ê–ß–ê –ù–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï)")
        print(f"{'='*60}")
        
        marina_task = f"""
–ü–ï–†–ï–î–ê–ß–ê –û–¢ –í–ê–°–ò –ù–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:

–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}
–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {vasya_result["answer"][:300]}...

–ú–∞—Ä–∏–Ω–∞, –í–∞—Å—è –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
3. –ù–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–≥–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
5. –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üîß –ò–°–ü–û–õ–¨–ó–£–ô: filesystem_read_file –∏ terminal_execute –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
"""
        
        marina_result = await self.send_to_agent("marina", marina_task)
        if not marina_result["success"]:
            print("‚ùå Marina –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –®–∞–≥ 4: Marina ‚Üí Supervisor (–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
        print(f"\n{'='*60}")
        print("–®–ê–ì 4: MARINA ‚Üí SUPERVISOR (–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò)")
        print(f"{'='*60}")
        
        final_report_message = f"""
–û–¢–ß–ï–¢ –û –í–´–ü–û–õ–ù–ï–ù–ò–ò –ó–ê–î–ê–ß–ò:

–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}

–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ó–†–ê–ë–û–¢–ö–ò (–í–∞—Å—è):
{vasya_result["answer"][:400]}...

–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–ú–∞—Ä–∏–Ω–∞):
{marina_result["answer"][:400]}...

–ü–µ—Ç—Ä–æ–≤–∏—á, –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π. –ü–æ–¥–≥–æ—Ç–æ–≤—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
        
        final_result = await self.send_to_agent("supervisor", final_report_message)
        
        # –ò—Ç–æ–≥–∏
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–ò WORKFLOW'–ê")
        print(f"{'='*60}")
        
        total_time = (
            supervisor_result.get("latency", 0) + 
            vasya_result.get("latency", 0) + 
            marina_result.get("latency", 0) + 
            final_result.get("latency", 0)
        )
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –ú–∞—Ä—à—Ä—É—Ç—ã:")
        print(f"   Supervisor: {supervisor_result.get('route', 'unknown')}")
        print(f"   Vasya: {vasya_result.get('route', 'unknown')}")
        print(f"   Marina: {marina_result.get('route', 'unknown')}")
        print(f"   Final: {final_result.get('route', 'unknown')}")
        
        print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"{final_result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:600]}...")
        
        print(f"\n{'='*60}")
        print("üí° –ó–ù–ê–ß–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print(f"{'='*60}")
        print("üåü –ü–æ–∫–∞–∑–∞–Ω –ø—Ä–∏–Ω—Ü–∏–ø —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è –∫–æ–º–∞–Ω–¥—ã:")
        print("   ‚Ä¢ Supervisor –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç")
        print("   ‚Ä¢ Vasya –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É") 
        print("   ‚Ä¢ Marina –ø—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
        print("üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")


async def main():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    demo = AgentWorkflowDemo()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    try:
        response = requests.get(f"{demo.api_base}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") 
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π
    task = "–°–æ–∑–¥–∞—Ç—å Python —Ñ–∞–π–ª timestamp_utils.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π get_current_timestamp() –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO"
    
    await demo.demonstrate_workflow(task)


if __name__ == "__main__":
    asyncio.run(main()) 
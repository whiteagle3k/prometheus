#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö ID –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω.
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
"""

import asyncio
from entities import (
    discover_entities, get_entity_info, list_entity_ids, 
    list_entity_names, get_entity_name, get_localized_name
)
from core.runtime.registry import get_agent

async def test_new_architecture():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∞–≥–µ–Ω—Ç–æ–≤ —Å –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    print("üèóÔ∏è –¢–ï–°–¢ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç entity discovery
    print("\nüìã –®–ê–ì 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENTITY DISCOVERY")
    print("-" * 40)
    
    entities = discover_entities()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(entities)}")
    
    for entity_id, info in entities.items():
        name_info = info.get('name', entity_id)
        if isinstance(name_info, dict):
            name_display = f"{name_info.get('en', 'Unknown')} / {name_info.get('ru', 'Unknown')}"
        else:
            name_display = str(name_info)
        print(f"   ‚Ä¢ {entity_id}: {name_display} ({info['class'].__name__})")
        print(f"     ‚îî‚îÄ {info.get('description', 'No description')}")
    
    # 2. –¢–µ—Å—Ç –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤—ã—Ö –∏–º–µ–Ω
    print(f"\nüåç –®–ê–ì 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–Ø–ó–´–ö–û–í–´–• –ò–ú–ï–ù") 
    print("-" * 40)
    
    entity_ids = list_entity_ids()
    print(f"üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID: {entity_ids}")
    
    # –¢–µ—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏–º–µ–Ω
    entity_names_en = list_entity_names("en")
    print(f"üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞: {entity_names_en}")
    
    # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
    entity_names_ru = list_entity_names("ru")
    print(f"üá∑üá∫ –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞: {entity_names_ru}")
    
    # –¢–µ—Å—Ç fallback –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫
    entity_names_de = list_entity_names("de")  # –ù–µ–º–µ—Ü–∫–∏–π - –¥–æ–ª–∂–µ–Ω fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    print(f"üá©üá™ –ù–µ–º–µ—Ü–∫–∏–µ –∏–º–µ–Ω–∞ (fallback): {entity_names_de}")
    
    # 3. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüîß –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò")
    print("-" * 40)
    
    test_cases = [
        ("supervisor", "en"),
        ("supervisor", "ru"), 
        ("developer", "en"),
        ("developer", "ru"),
        ("qa", "en"),
        ("qa", "ru"),
        ("aletheia", "en"),
        ("aletheia", "ru")
    ]
    
    for entity_id, lang in test_cases:
        try:
            localized_name = get_entity_name(entity_id, lang)
            print(f"   ‚úÖ {entity_id} ({lang}): {localized_name}")
        except Exception as e:
            print(f"   ‚ùå {entity_id} ({lang}): –û—à–∏–±–∫–∞ - {e}")
    
    # 4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π registry
    print(f"\nüöÄ –®–ê–ì 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ê–ì–ï–ù–¢–û–í")
    print("-" * 40)
    
    for entity_id in entity_ids:
        try:
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∂–∞—é {entity_id}...")
            agent = await get_agent(entity_id)
            entity_info = get_entity_info(entity_id)
            
            name_en = get_entity_name(entity_id, "en")
            name_ru = get_entity_name(entity_id, "ru")
            
            print(f"‚úÖ {entity_id} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   ‚Ä¢ –ò–º—è (EN): {name_en}")
            print(f"   ‚Ä¢ –ò–º—è (RU): {name_ru}")
            print(f"   ‚Ä¢ –ö–ª–∞—Å—Å: {type(agent).__name__}")
            print(f"   ‚Ä¢ –ú–æ–¥—É–ª—å: {entity_info['module_path']}")
            print(f"   ‚Ä¢ –†–æ–ª—å: {entity_info.get('role', 'Unknown')}")
            
        except Exception as e:
            print(f"‚ùå {entity_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}")
            import traceback
            traceback.print_exc()
    
    # 5. –¢–µ—Å—Ç registry statistics —Å –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    print(f"\nüìä –®–ê–ì 5: –°–¢–ê–¢–ò–°–¢–ò–ö–ê REGISTRY –° –ú–£–õ–¨–¢–ò–Ø–ó–´–ö–û–í–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô")
    print("-" * 40)
    
    from core.runtime.registry import get_registry_stats
    stats = get_registry_stats()
    
    print(f"üî¢ –ó–∞–ø—É—â–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats['agent_count']}")
    print(f"üìã –°–ø–∏—Å–æ–∫ ID: {stats['running_agents']}")
    
    if 'agent_info' in stats:
        print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        for entity_id, info in stats['agent_info'].items():
            name_en = info.get('name', entity_id)
            name_data = info.get('name_localized', entity_id)
            if isinstance(name_data, dict):
                name_ru = name_data.get('ru', name_en)
            else:
                name_ru = str(name_data)
            print(f"   ‚Ä¢ {entity_id}: {name_en} / {name_ru} ({info.get('class', 'Unknown')})")
    
    # 6. –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å Anthropic
    print(f"\nüîß –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ANTHROPIC")
    print("-" * 40)
    
    try:
        vasya_info = get_entity_info("developer")
        vasya_agent = await get_agent("developer")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Vasya –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI –≤–º–µ—Å—Ç–æ Anthropic
        identity = vasya_agent.identity_config
        llm_config = identity.get("external_llms", {})
        primary_provider = llm_config.get("primary_provider", "unknown")
        anthropic_enabled = llm_config.get("providers", {}).get("anthropic", {}).get("enabled", False)
        
        print(f"   ‚úÖ –í–∞—Å—è primary provider: {primary_provider}")
        print(f"   ‚úÖ Anthropic enabled: {anthropic_enabled}")
        
        if primary_provider == "openai" and not anthropic_enabled:
            print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å Anthropic –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Anthropic: {e}")

    # 7. –¢–µ—Å—Ç fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print(f"\n‚ö° –®–ê–ì 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FAST-TRACK –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("-" * 40)
    
    external_agents = ["supervisor", "developer", "qa"]  # –í—Å–µ –∏–º–µ—é—Ç prefer_external: true
    
    for agent_id in external_agents:
        try:
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é fast-track –¥–ª—è {agent_id}...")
            agent = await get_agent(agent_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ prefer_external
            should_fast_track = agent._should_use_external_fast_track("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
            print(f"   üéØ Fast-track enabled: {should_fast_track}")
            
            if should_fast_track:
                # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å fast-track (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
                import time
                start_time = time.time()
                
                simple_request = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
                result = await agent.think(simple_request, user_id="fast_track_test")
                
                elapsed_time = time.time() - start_time
                fast_track_used = result.get("execution_details", {}).get("fast_track", False)
                route_used = result.get("execution_details", {}).get("route_used", "unknown")
                
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f}s")
                print(f"   üöÄ Fast-track –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {fast_track_used}")
                print(f"   üìä –ú–∞—Ä—à—Ä—É—Ç: {route_used}")
                
                if fast_track_used and elapsed_time < 5.0:  # –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
                    print(f"   ‚úÖ Fast-track —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
                elif fast_track_used:
                    print(f"   ‚ö†Ô∏è Fast-track —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—Ä–µ–º—è –≤—ã—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
                else:
                    print(f"   ‚ùå Fast-track –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            else:
                print(f"   ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ fast-track")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {agent_id}: {e}")
    
    print(f"\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("‚úÖ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å Anthropic –¥–ª—è –í–∞—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    print("‚ö° Fast-track –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è external-only –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(test_new_architecture()) 
#!/usr/bin/env python3
"""
üí¨ –ß–ò–°–¢–´–ô –î–ò–ê–õ–û–ì –ú–ï–ñ–î–£ –ê–ì–ï–ù–¢–ê–ú–ò

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤.
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤.
"""

import asyncio
import requests
import time
from datetime import datetime
import json

API_BASE = "http://localhost:8000"
CHAT_ENDPOINT = f"{API_BASE}/v1/chat"

class CleanDialogue:
    """–ß–∏—Å—Ç—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º—É—Å–æ—Ä–∞."""
    
    def __init__(self):
        self.conversation_log = []
        self.start_time = time.time()
    
    def add_message(self, speaker: str, message: str, response: str, timing: dict):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –¥–∏–∞–ª–æ–≥–∞."""
        self.conversation_log.append({
            "timestamp": datetime.now(),
            "speaker": speaker,
            "message": message,
            "response": response,
            "timing": timing
        })
    
    async def send_clean_message(self, agent_id: str, message: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç."""
        
        agent_names = {
            "supervisor": "–ü–µ—Ç—Ä–æ–≤–∏—á (Supervisor)",
            "vasya": "–í–∞—Å—è (Developer)",
            "marina": "–ú–∞—Ä–∏–Ω–∞ (QA)",
            "aletheia": "–ê–ª–µ—Ç–µ–π—è (AI Assistant)"
        }
        
        speaker_name = agent_names.get(agent_id, agent_id)
        
        try:
            start_time = time.time()
            response = requests.post(
                CHAT_ENDPOINT,
                params={"entity": agent_id}, 
                json={"message": message, "user_id": "clean_dialogue"},
                timeout=60
            )
            elapsed_time = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                route = result.get('route', 'unknown')
                latency = result.get('latency', elapsed_time)
                
                timing_info = {
                    "total_time": elapsed_time,
                    "llm_time": latency,
                    "route": route
                }
                
                self.add_message(speaker_name, message, answer, timing_info)
                
                return {
                    "success": True,
                    "speaker": speaker_name,
                    "response": answer,
                    "timing": timing_info
                }
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def print_dialogue_header(self):
        """–ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞."""
        print("=" * 80)
        print("üí¨ –ß–ò–°–¢–´–ô –î–ò–ê–õ–û–ì PROMETHEUS AI TEAM")
        print("=" * 80)
        print(f"üïê –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
    
    def print_message(self, entry: dict):
        """–ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ."""
        timestamp = entry["timestamp"].strftime("%H:%M:%S")
        speaker = entry["speaker"]
        message = entry["message"]
        response = entry["response"]
        timing = entry["timing"]
        
        print(f"[{timestamp}] üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí {speaker}:")
        print(f"   üìù –ó–∞–ø—Ä–æ—Å: {message}")
        print()
        
        print(f"[{timestamp}] ü§ñ {speaker} –û–¢–í–ï–ß–ê–ï–¢:")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {timing['llm_time']:.1f}—Å")
        print(f"   üõ§Ô∏è  –ú–∞—Ä—à—Ä—É—Ç: {timing['route']}")
        print(f"   üí¨ –û—Ç–≤–µ—Ç:")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        lines = response.split('\n')
        for line in lines:
            if line.strip():
                print(f"      {line}")
        
        print("-" * 60)
        print()
    
    def generate_dialogue_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–ª–æ–≥–∞."""
        total_time = time.time() - self.start_time
        
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–õ–û–ì–ê")
        print("=" * 80)
        
        if not self.conversation_log:
            print("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è")
            return
        
        print(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.conversation_log)}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
        agent_stats = {}
        total_llm_time = 0
        
        for entry in self.conversation_log:
            speaker = entry["speaker"]
            timing = entry["timing"]
            llm_time = timing["llm_time"]
            route = timing["route"]
            
            if speaker not in agent_stats:
                agent_stats[speaker] = {
                    "messages": 0,
                    "total_llm_time": 0,
                    "routes": {}
                }
            
            agent_stats[speaker]["messages"] += 1
            agent_stats[speaker]["total_llm_time"] += llm_time
            total_llm_time += llm_time
            
            if route not in agent_stats[speaker]["routes"]:
                agent_stats[speaker]["routes"][route] = 0
            agent_stats[speaker]["routes"][route] += 1
        
        print(f"üß† –û–±—â–µ–µ –≤—Ä–µ–º—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_llm_time:.1f} —Å–µ–∫—É–Ω–¥")
        print()
        
        print("üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ì–ï–ù–¢–ê–ú:")
        for speaker, stats in agent_stats.items():
            print(f"   ü§ñ {speaker}:")
            print(f"      üì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}")
            print(f"      ‚è±Ô∏è  –í—Ä–µ–º—è LLM: {stats['total_llm_time']:.1f}—Å")
            print(f"      üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['total_llm_time']/stats['messages']:.1f}—Å")
            
            print(f"      üõ§Ô∏è  –ú–∞—Ä—à—Ä—É—Ç—ã:")
            for route, count in stats["routes"].items():
                print(f"         ‚Ä¢ {route}: {count} —Ä–∞–∑")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥
        print("=" * 80)
        print("üìú –ü–û–õ–ù–´–ô –î–ò–ê–õ–û–ì")
        print("=" * 80)
        
        for entry in self.conversation_log:
            self.print_message(entry)
    
    async def run_simple_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞."""
        self.print_dialogue_header()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ü–µ—Ç—Ä–æ–≤–∏—á–µ–º
        print("üß™ –¢–ï–°–¢ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ü–µ—Ç—Ä–æ–≤–∏—á–µ–º")
        result1 = await self.send_clean_message(
            "supervisor", 
            "–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ç—Ä–æ–≤–∏—á! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö."
        )
        
        if result1["success"]:
            print("‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á –æ—Ç–≤–µ—Ç–∏–ª!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result1['error']}")
            return
        
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –í–∞—Å–∏
        print("üß™ –¢–ï–°–¢ 2: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –í–∞—Å–∏")
        result2 = await self.send_clean_message(
            "vasya",
            "–ü—Ä–∏–≤–µ—Ç, –í–∞—Å—è! –ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?"
        )
        
        if result2["success"]:
            print("‚úÖ –í–∞—Å—è –æ—Ç–≤–µ—Ç–∏–ª!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result2['error']}")
        
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 3: –í–æ–ø—Ä–æ—Å –∫ –ú–∞—Ä–∏–Ω–µ
        print("üß™ –¢–ï–°–¢ 3: –í–æ–ø—Ä–æ—Å –∫ –ú–∞—Ä–∏–Ω–µ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
        result3 = await self.send_clean_message(
            "marina",
            "–ü—Ä–∏–≤–µ—Ç, –ú–∞—Ä–∏–Ω–∞! –ö–∞–∫ —Ç—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–π?"
        )
        
        if result3["success"]:
            print("‚úÖ –ú–∞—Ä–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result3['error']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_dialogue_report()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
    print("poetry run python prometheus.py api --entities supervisor,vasya,marina --host localhost --port 8000")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤...")
    
    dialogue = CleanDialogue()
    await dialogue.run_simple_test()

if __name__ == "__main__":
    asyncio.run(main()) 
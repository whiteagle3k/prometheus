#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Agent Workflow
–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ü–µ—Ç—Ä–æ–≤–∏—á ‚Üí –í–∞—Å—è/–ú–∞—Ä–∏–Ω–∞ ‚Üí –ü–µ—Ç—Ä–æ–≤–∏—á ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
"""

import asyncio
import requests
import time
from datetime import datetime
from typing import Dict, Any

# Prometheus API endpoints
API_BASE = "http://localhost:8000"
CHAT_ENDPOINT = f"{API_BASE}/v1/chat"
HEALTH_ENDPOINT = f"{API_BASE}/health"


async def wait_for_server():
    """–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Prometheus API —Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        try:
            response = requests.get(HEALTH_ENDPOINT, timeout=2)
            if response.status_code == 200:
                print("‚úÖ Prometheus API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                return True
        except:
            pass
        await asyncio.sleep(1)
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
    
    print("‚ùå Timeout –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
    return False


async def send_message_to_agent(agent: str, message: str, user_id: str = "test_user") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ API."""
    try:
        response = requests.post(
            CHAT_ENDPOINT,
            params={"entity": agent},
            json={"message": message, "user_id": user_id},
            timeout=60  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"HTTP {response.status_code}: {response.text}"}
            
    except Exception as e:
        return {"error": str(e)}


async def full_contextual_workflow():
    """–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π workflow —Ç–µ—Å—Ç."""
    print("üöÄ –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–´–ô WORKFLOW –¢–ï–°–¢")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if not await wait_for_server():
        print("üíî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        return False
    
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô:")
    print("1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –ê–ª–µ—Ç–µ–π–µ (—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—É)")
    print("2. –ê–ª–µ—Ç–µ–π—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç")
    print("3. –ê–ª–µ—Ç–µ–π—è –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –í–∞—Å–µ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞) –∏ –ú–∞—Ä–∏–Ω–µ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
    print("4. –ê–ª–µ—Ç–µ–π—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("5. –ê–ª–µ—Ç–µ–π—è –æ—Ç—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    # –ó–∞–¥–∞—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_task = """
–ü—Ä–∏–≤–µ—Ç –ü–µ—Ç—Ä–æ–≤–∏—á! –ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Python –º–æ–¥—É–ª—å date_helper.py
- –§—É–Ω–∫—Ü–∏—è format_date(date, format) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
- –§—É–Ω–∫—Ü–∏—è parse_date(date_string) –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ –≤ –¥–∞—Ç—ã
- –§—É–Ω–∫—Ü–∏—è days_between(date1, date2) –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
- –ü—Ä–æ—Å—Ç—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""
    
    print(f"\n" + "="*60)
    print("üéØ –®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–¢–ê–í–ò–¢ –ó–ê–î–ê–ß–£ –ê–õ–ï–¢–ï–ô–ï (–°–£–ü–ï–†–í–ò–ó–û–†–£)")
    print("="*60)
    print(f"–ó–∞–¥–∞—á–∞: {user_task.strip()}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ê–ª–µ—Ç–µ–π–µ
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –ê–ª–µ—Ç–µ–π–µ...")
    supervisor_response = await send_message_to_agent("aletheia", user_task)
    
    if "error" in supervisor_response:
        print(f"‚ùå –û—à–∏–±–∫–∞: {supervisor_response['error']}")
        return False
    
    print(f"üì• –û—Ç–≤–µ—Ç –ê–ª–µ—Ç–µ–π–∏:")
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {supervisor_response.get('latency', 0):.1f}—Å")
    print(f"   –ú–∞—Ä—à—Ä—É—Ç: {supervisor_response.get('route', 'unknown')}")
    print(f"   –û—Ç–≤–µ—Ç: {supervisor_response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:500]}...")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –ê–ª–µ—Ç–µ–π–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n‚è≥ –î–∞–µ–º –ê–ª–µ—Ç–µ–π–µ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
    await asyncio.sleep(10)
    
    print(f"\n" + "="*60)
    print("üîç –®–ê–ì 2: –ü–†–û–í–ï–†–Ø–ï–ú –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–ª –ê–ª–µ—Ç–µ–π—è
    from core.mcp.servers.agent_communication_server import active_tasks
    
    if active_tasks:
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:")
        for task_id, task in active_tasks.items():
            print(f"   ‚Ä¢ {task_id}: {task['title']} ‚Üí {task['target_agent']} ({task['status']})")
    else:
        print("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"\n" + "="*60)
    print("ü§ù –®–ê–ì 3: –°–ò–ú–£–õ–ò–†–£–ï–ú –†–ê–ë–û–¢–£ –í–ê–°–ò (–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê)")
    print("="*60)
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–ª—è –í–∞—Å–∏
    vasya_task = None
    for task_id, task in active_tasks.items():
        if task['target_agent'] == 'vasya' and task['status'] == 'pending':
            vasya_task = task_id
            break
    
    if vasya_task:
        print(f"üîß –ù–∞—à–ª–∏ –∑–∞–¥–∞—á—É –¥–ª—è –í–∞—Å–∏: {vasya_task}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –í–∞—Å–∏
        vasya_message = f"""
–ê–ª–µ—Ç–µ–π—è, –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É {vasya_task}. –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É date_helper.py.

–°–æ–∑–¥–∞–º –º–æ–¥—É–ª—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
1. format_date() - –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
2. parse_date() - –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫
3. days_between() - –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π

–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 30 –º–∏–Ω—É—Ç.
"""
        
        print(f"üì§ –í–∞—Å—è –æ—Ç—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ê–ª–µ—Ç–µ–π–µ...")
        vasya_response = await send_message_to_agent("aletheia", vasya_message, "vasya_agent")
        print(f"üì• –û—Ç–≤–µ—Ç –ê–ª–µ—Ç–µ–π–∏ –í–∞—Å–µ: {vasya_response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
        
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –í–∞—Å–∏")
    
    print(f"\n" + "="*60)
    print("üß™ –®–ê–ì 4: –°–ò–ú–£–õ–ò–†–£–ï–ú –†–ê–ë–û–¢–£ –ú–ê–†–ò–ù–´ (–¢–ï–°–¢–ò–†–û–í–©–ò–ö–ê)")
    print("="*60)
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–ª—è –ú–∞—Ä–∏–Ω—ã
    marina_task = None
    for task_id, task in active_tasks.items():
        if task['target_agent'] == 'marina' and task['status'] == 'pending':
            marina_task = task_id
            break
    
    if marina_task:
        print(f"üîç –ù–∞—à–ª–∏ –∑–∞–¥–∞—á—É –¥–ª—è –ú–∞—Ä–∏–Ω—ã: {marina_task}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ú–∞—Ä–∏–Ω—ã
        marina_message = f"""
–ê–ª–µ—Ç–µ–π—è, –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–¥–∞—á—É {marina_task} –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ date_helper.py.

–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç –í–∞—Å–∏.
"""
        
        print(f"üì§ –ú–∞—Ä–∏–Ω–∞ –æ—Ç—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ê–ª–µ—Ç–µ–π–µ...")
        marina_response = await send_message_to_agent("aletheia", marina_message, "marina_agent")
        print(f"üì• –û—Ç–≤–µ—Ç –ê–ª–µ—Ç–µ–π–∏ –ú–∞—Ä–∏–Ω–µ: {marina_response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
        
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ú–∞—Ä–∏–Ω—ã")
    
    print(f"\n" + "="*60)
    print("‚úÖ –®–ê–ì 5: –ê–õ–ï–¢–ï–ô–Ø –í–ê–õ–ò–î–ò–†–£–ï–¢ –ò –û–¢–ß–ò–¢–´–í–ê–ï–¢–°–Ø")
    print("="*60)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ê–ª–µ—Ç–µ–π–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    status_request = """
–ê–ª–µ—Ç–µ–π—è, –∫–∞–∫–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é date_helper.py? 
–í—Å–µ –ª–∏ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É? –ö–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ?
"""
    
    print(f"üì§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É –ê–ª–µ—Ç–µ–π–∏...")
    status_response = await send_message_to_agent("aletheia", status_request)
    
    print(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –û–¢ –ê–õ–ï–¢–ï–ô–ò:")
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {status_response.get('latency', 0):.1f}—Å")
    print(f"   –ú–∞—Ä—à—Ä—É—Ç: {status_response.get('route', 'unknown')}")
    print(f"   –°—Ç–∞—Ç—É—Å: {status_response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê WORKFLOW")
    print("="*60)
    print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {len(active_tasks)}")
    print(f"üéØ –ê–≥–µ–Ω—Ç–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: –ê–ª–µ—Ç–µ–π—è (—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä), –í–∞—Å—è (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫), –ú–∞—Ä–∏–Ω–∞ (—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫)")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ~30 —Å–µ–∫—É–Ω–¥")
    print(f"üîÑ Workflow —Å—Ç–∞—Ç—É—Å: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        success = await full_contextual_workflow()
        if success:
            print(f"\nüéâ –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–´–ô WORKFLOW –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑—É—é—â–∏—Ö—Å—è AI –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
        else:
            print(f"\nüíî Workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö LLM.
"""

import asyncio
import json
from pathlib import Path
from core.llm.router import LLMRouter, TaskContext


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def load_agent_config(agent_name: str) -> dict:
    """Load agent configuration from identity file."""
    config_path = Path(f"entities/{agent_name}/identity/identity.json")
    
    if not config_path.exists():
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
        return {}
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {agent_name}")
        return config
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {agent_name}: {e}")
        return {}


async def test_router_with_config(agent_name: str, config: dict):
    """Test router with specific agent configuration."""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è {agent_name}...")
    
    # Create router with agent config
    router = LLMRouter(identity_config=config)
    
    # Test task context
    task = TaskContext(
        prompt="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ timestamp",
        max_tokens=500,
        temperature=0.7
    )
    
    try:
        # Check routing preferences
        operational_guidelines = config.get("operational_guidelines", {})
        routing_policy = operational_guidelines.get("routing_policy", {})
        prefer_external = routing_policy.get("prefer_external", False)
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   prefer_external: {prefer_external}")
        print(f"   routing_policy: {routing_policy}")
        
        # Test routing decision
        decision = await router.route_task(task)
        print(f"üéØ –†–µ—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {decision.value}")
        
        if prefer_external and decision.value == "external":
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π LLM")
            return True
        elif prefer_external and decision.value != "external":
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω–µ—à–Ω–∏–π LLM")
            return False
        else:
            print("‚ÑπÔ∏è  –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞: {e}")
        return False


async def main():
    """Main test function."""
    print_section("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–û–£–¢–ï–†–ê")
    
    # Test all dev team agents
    agents = ["supervisor", "vasya", "marina"]
    results = {}
    
    for agent in agents:
        print_section(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent.upper()}")
        
        # Load agent config
        config = load_agent_config(agent)
        if not config:
            results[agent] = False
            continue
        
        # Test router
        success = await test_router_with_config(agent, config)
        results[agent] = success
    
    # Summary
    print_section("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    
    all_passed = True
    for agent, success in results.items():
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{agent}: {status}")
        if not success:
            all_passed = False
    
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if all_passed else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    if all_passed:
        print("\nüí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("   –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ LLM (GPT-4o, Claude)")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    asyncio.run(main()) 
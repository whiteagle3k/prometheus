#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MCP agent communication —Å –æ–±—Ö–æ–¥–æ–º –ø—Ä–æ–±–ª–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
import json
from pathlib import Path

# Add core to path
sys.path.insert(0, str(Path(__file__).parent))

from core.mcp.client.mcp_client import MCPClient


async def test_agent_communication_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç agent_communication –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é agent_communication –Ω–∞–ø—Ä—è–º—É—é...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä
    client = MCPClient()
    
    try:
        print("üîå –ó–∞–ø—É—Å–∫–∞—é —Ç–æ–ª—å–∫–æ agent_communication —Å–µ—Ä–≤–µ—Ä...")
        await client._start_server("agent_communication", "core/mcp/servers/agent_communication_server.py")
        
        if "agent_communication" in client.sessions:
            print("‚úÖ Agent communication —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            session = client.sessions["agent_communication"]
            tools_result = await session.list_tools()
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tools_result.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for tool in tools_result.tools:
                print(f"   ‚Ä¢ {tool.name}: {tool.description}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å agent_get_status
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é agent_get_status...")
            status_result = await session.call_tool("agent_get_status", {})
            
            if status_result.content:
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status_result.content[0].text[:200]}...")
            
            return True
        else:
            print("‚ùå Agent communication —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        try:
            await client.shutdown()
            print("üîå MCP –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


if __name__ == "__main__":
    success = asyncio.run(test_agent_communication_simple())
    if success:
        print("\nüéâ Agent communication —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\nüíî –ü—Ä–æ–±–ª–µ–º—ã —Å agent communication.") 
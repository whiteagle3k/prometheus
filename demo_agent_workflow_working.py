#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ Agent Workflow
–û–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º MCP –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ agent_communication —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import requests
from datetime import datetime
from typing import Dict, Any


# –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ agent_communication_server
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
from core.mcp.servers.agent_communication_server import (
    _agent_send_message,
    _agent_delegate_task,
    _agent_get_status,
    _agent_get_active_tasks,
    _agent_update_task_status,
    active_tasks,
    task_counter
)


class WorkingAgentCommunication:
    """–†–∞–±–æ—á–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è agent communication –±–µ–∑ MCP –∫–ª–∏–µ–Ω—Ç–∞."""
    
    async def send_message(self, target_agent: str, message: str, task_type: str = "general", priority: str = "medium"):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É."""
        result = await _agent_send_message({
            "target_agent": target_agent,
            "message": message,
            "task_type": task_type,
            "priority": priority
        })
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
    
    async def delegate_task(self, target_agent: str, task_title: str, task_description: str, 
                          acceptance_criteria=None, priority: str = "medium", deadline=None):
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É."""
        args = {
            "target_agent": target_agent,
            "task_title": task_title,
            "task_description": task_description,
            "priority": priority
        }
        if acceptance_criteria:
            args["acceptance_criteria"] = acceptance_criteria
        if deadline:
            args["deadline"] = deadline
            
        result = await _agent_delegate_task(args)
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    async def get_status(self, target_agent=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤."""
        args = {}
        if target_agent:
            args["target_agent"] = target_agent
            
        result = await _agent_get_status(args)
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    
    async def get_active_tasks(self, filter_by_agent=None, filter_by_status=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
        args = {}
        if filter_by_agent:
            args["filter_by_agent"] = filter_by_agent
        if filter_by_status:
            args["filter_by_status"] = filter_by_status
            
        result = await _agent_get_active_tasks(args)
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á"
    
    async def update_task_status(self, task_id: str, status: str, result_text=None, next_agent=None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏."""
        args = {"task_id": task_id, "status": status}
        if result_text:
            args["result"] = result_text
        if next_agent:
            args["next_agent"] = next_agent
            
        result = await _agent_update_task_status(args)
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"


async def demo_agent_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ agent workflow."""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AGENT WORKFLOW")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –∫–ª–∏–µ–Ω—Ç
    agent_comm = WorkingAgentCommunication()
    
    print("üìä 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
    status = await agent_comm.get_status()
    print(f"–°—Ç–∞—Ç—É—Å: {status[:200]}...")
    
    print("\nüéØ 2. –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –í–∞—Å–µ...")
    delegation_result = await agent_comm.delegate_task(
        target_agent="vasya",
        task_title="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —É—Ç–∏–ª–∏—Ç–æ–π –≤—Ä–µ–º–µ–Ω–∏",
        task_description="–°–æ–∑–¥–∞–π Python —Ñ–∞–π–ª time_utils.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π get_current_timestamp() –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ",
        acceptance_criteria=[
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞",
            "–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ",
            "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        ],
        priority="medium"
    )
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {delegation_result[:300]}...")
    
    # –ò—â–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    task_id = None
    if "TASK_" in delegation_result:
        import re
        match = re.search(r'(TASK_\d+_\w+_\d+)', delegation_result)
        if match:
            task_id = match.group(1)
            print(f"üìã –ù–∞–π–¥–µ–Ω ID –∑–∞–¥–∞—á–∏: {task_id}")
    
    print("\nüìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
    tasks = await agent_comm.get_active_tasks()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {tasks}")
    
    if task_id:
        print(f"\nüîÑ 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ 'in_progress'...")
        update_result = await agent_comm.update_task_status(
            task_id=task_id,
            status="in_progress",
            result_text="–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ñ–∞–π–ª–æ–º time_utils.py"
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_result}")
        
        print(f"\n‚úÖ 5. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É {task_id}...")
        complete_result = await agent_comm.update_task_status(
            task_id=task_id,
            status="completed",
            result_text="–§–∞–π–ª time_utils.py —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π get_current_timestamp()",
            next_agent="marina"
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {complete_result}")
    
    print("\nüìã 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
    final_tasks = await agent_comm.get_active_tasks()
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: {final_tasks}")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("‚úÖ Agent Communication —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
    print("üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ workflow")
    print("   ‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus API")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await demo_agent_workflow()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
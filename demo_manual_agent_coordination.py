#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—á–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π workflow: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Manual Coordination ‚Üí Agents ‚Üí Results
"""

import asyncio
import requests
from datetime import datetime

# Import agent communication directly
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from core.mcp.servers.agent_communication_server import (
    _agent_send_message,
    _agent_delegate_task,
    _agent_get_status,
    _agent_get_active_tasks,
    _agent_update_task_status,
    active_tasks
)

class ManualAgentCoordinator:
    """–†—É—á–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ workflow."""
    
    async def delegate_development_task(self, task_title: str, task_description: str):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –í–∞—Å–µ."""
        result = await _agent_delegate_task({
            "target_agent": "vasya",
            "task_title": task_title,
            "task_description": task_description,
            "acceptance_criteria": [
                "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º",
                "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "–î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"
            ],
            "priority": "high"
        })
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    async def delegate_testing_task(self, task_title: str, task_description: str):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–∞—Ä–∏–Ω–µ."""
        result = await _agent_delegate_task({
            "target_agent": "marina",
            "task_title": task_title,
            "task_description": task_description,
            "acceptance_criteria": [
                "Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
                "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"
            ],
            "priority": "high"
        })
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    async def get_task_status(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        result = await _agent_get_active_tasks({})
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    
    async def complete_task(self, task_id: str, result_description: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É."""
        result = await _agent_update_task_status({
            "task_id": task_id,
            "status": "completed",
            "result": result_description
        })
        return result.content[0].text if result.content else "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"


async def demonstrate_manual_coordination():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—á–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–£–ß–ù–û–ô –ö–û–û–†–î–ò–ù–ê–¶–ò–ò –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    coordinator = ManualAgentCoordinator()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
    user_request = """
–°–æ–∑–¥–∞—Ç—å Python —É—Ç–∏–ª–∏—Ç—É calculator_utils.py —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
1. add(a, b) - —Å–ª–æ–∂–µ–Ω–∏–µ
2. multiply(a, b) - —É–º–Ω–æ–∂–µ–Ω–∏–µ  
3. divide(a, b) - –¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–æ–ª—å
4. factorial(n) - —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞
"""
    
    print("üìã –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ó–ê–ü–†–û–°:")
    print(user_request)
    
    print(f"\nüéØ –®–ê–ì 1: –ö–û–û–†–î–ò–ù–ê–¢–û–† –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢ –ò –î–ï–õ–ï–ì–ò–†–£–ï–¢")
    print("=" * 50)
    
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –í–∞—Å–µ
    print("üîß –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –í–∞—Å–µ...")
    dev_result = await coordinator.delegate_development_task(
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ calculator_utils.py",
        f"–°–æ–∑–¥–∞—Ç—å Python –º–æ–¥—É–ª—å —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n{user_request}"
    )
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n{dev_result[:300]}...\n")
    
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ä–∏–Ω–µ
    print("üß™ –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ä–∏–Ω–µ...")
    test_result = await coordinator.delegate_testing_task(
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ calculator_utils.py",
        "–°–æ–∑–¥–∞—Ç—å comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è calculator_utils.py —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"
    )
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{test_result[:300]}...\n")
    
    print(f"üéØ –®–ê–ì 2: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–î–ê–ß")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
    task_status = await coordinator.get_task_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n{task_status}\n")
    
    print(f"üéØ –®–ê–ì 3: –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –†–ê–ë–û–¢")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    for task_id, task in active_tasks.items():
        if task['target_agent'] == 'vasya' and task['status'] == 'pending':
            print(f"üîß –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {task_id}")
            completion_result = await coordinator.complete_task(
                task_id,
                """
–ú–æ–¥—É–ª—å calculator_utils.py —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!

–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- add(a, b): —Å–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
- multiply(a, b): —É–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª  
- divide(a, b): –¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–æ–ª—å
- factorial(n): –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.
–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
"""
            )
            print(f"‚úÖ {completion_result[:200]}...\n")
            break
    
    for task_id, task in active_tasks.items():
        if task['target_agent'] == 'marina' and task['status'] == 'pending':
            print(f"üß™ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {task_id}")
            completion_result = await coordinator.complete_task(
                task_id,
                """
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ calculator_utils.py –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö 4 —Ñ—É–Ω–∫—Ü–∏–π
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤  
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)
- Performance —Ç–µ—Å—Ç—ã –¥–ª—è factorial

–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ
–ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.
"""
            )
            print(f"‚úÖ {completion_result[:200]}...\n")
            break
    
    print(f"üéØ –®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°")
    print("=" * 50)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    final_status = await coordinator.get_task_status()
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:\n{final_status}")
    
    print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
    print("   ‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è") 
    print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–¥–∞—á")
    print("   ‚Ä¢ Coordination –º–µ–∂–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–º")
    print("   ‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ agent communication")
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len([t for t in active_tasks.values()])}")
    print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {len([t for t in active_tasks.values() if t['status'] == 'completed'])}")
    print(f"   ‚Ä¢ –ê–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: 2 (Vasya + Marina)")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: ~30 —Å–µ–∫—É–Ω–¥")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await demonstrate_manual_coordination()
        print(f"\nüöÄ –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–†–ì–ê–ù–ò–ó–£–Æ–©–ò–•–°–Ø AI –ê–ì–ï–ù–¢–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!")
        print(f"üí° –ì–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª—é–±—ã–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–æ–º (–ü–µ—Ç—Ä–æ–≤–∏—á, GPT-4, Claude, –∏ —Ç.–¥.)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ü–µ—Ç—Ä–æ–≤–∏—á–µ–º, –í–∞—Å–µ–π –∏ –ú–∞—Ä–∏–Ω–æ–π
"""

import asyncio
import pytest
import sys
import traceback
from typing import Dict, Any
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

try:
    from entities import discover_entities
    from entities.supervisor import SupervisorEntity
    from entities.vasya import VasyaEntity
    from entities.marina import MarinaEntity
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class TestDevTeamWorkflow:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @pytest.fixture
    def entities(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            discovered = discover_entities()
            entities = {}
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
            for name, info in discovered.items():
                if name in ['petrovich', 'vasya', 'marina']:
                    entity_class = info['class']
                    entities[name] = entity_class()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {name}")
            
            return entities
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            traceback.print_exc()
            return {}
    
    def test_team_discovery(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        print("\nüîç –¢–µ—Å—Ç 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
        
        discovered = discover_entities()
        required_agents = ['petrovich', 'vasya', 'marina']
        
        for agent in required_agents:
            assert agent in discovered, f"–ê–≥–µ–Ω—Ç {agent} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç: {agent}")
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    def test_agent_initialization(self, entities):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nüöÄ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        
        required_agents = ['petrovich', 'vasya', 'marina']
        
        for agent_name in required_agents:
            assert agent_name in entities, f"–ê–≥–µ–Ω—Ç {agent_name} –Ω–µ —Å–æ–∑–¥–∞–Ω"
            agent = entities[agent_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ identity
            assert hasattr(agent, 'identity'), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç identity"
            assert agent.identity is not None, f"Identity –∞–≥–µ–Ω—Ç–∞ {agent_name} –ø—É—Å—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è identity
            assert 'name' in agent.identity, f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç –∏–º–µ–Ω–∏"
            assert 'llm_instructions' in agent.identity, f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç LLM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
            
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} ({agent.identity['name']}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_agent_capabilities(self, entities):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\n‚ö° –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP capabilities
        for agent_name, agent in entities.items():
            assert hasattr(agent, 'mcp_client'), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –º–µ—Ç–æ–¥—ã
            mcp_methods = [
                'read_file', 'write_file', 'list_directory',  # filesystem
                'git_status', 'git_add', 'git_commit',        # git
                'execute_command', 'run_script',              # terminal
                'web_search', 'http_get'                      # web
            ]
            
            for method in mcp_methods:
                assert hasattr(agent, method), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ {method}"
            
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –∏–º–µ–µ—Ç –≤—Å–µ MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ({len(mcp_methods)} –º–µ—Ç–æ–¥–æ–≤)")
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_vasya_coding_task(self, entities):
        """–¢–µ—Å—Ç 4: –í–∞—Å—è –º–æ–∂–µ—Ç –∫–æ–¥–∏—Ç—å"""
        print("\nüë®‚Äçüíª –¢–µ—Å—Ç 4: –í–∞—Å—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        vasya = entities.get('vasya')
        assert vasya is not None, "–í–∞—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –î–∞–µ–º –í–∞—Å–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        coding_task = """
        –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é Python —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞.
        –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è calculate_factorial –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä n.
        –î–æ–±–∞–≤—å docstring –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
        """
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –í–∞—Å–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
            response = await vasya.think(coding_task)
            
            assert response is not None, "–í–∞—Å—è –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"
            assert len(response) > 50, "–û—Ç–≤–µ—Ç –í–∞—Å–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–¥–∞
            code_indicators = ['def ', 'factorial', 'return', 'docstring', 'if']
            found_indicators = [indicator for indicator in code_indicators if indicator.lower() in response.lower()]
            
            assert len(found_indicators) >= 3, f"–í –æ—Ç–≤–µ—Ç–µ –í–∞—Å–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–æ–¥–∞. –ù–∞–π–¥–µ–Ω–æ: {found_indicators}"
            
            print(f"‚úÖ –í–∞—Å—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            print(f"   –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–¥–∞: {found_indicators}")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –í–∞—Å–∏: {e}")
            raise
    
    @pytest.mark.asyncio
    async def test_marina_testing_task(self, entities):
        """–¢–µ—Å—Ç 5: –ú–∞—Ä–∏–Ω–∞ –º–æ–∂–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"""
        print("\nüë©‚Äçüíº –¢–µ—Å—Ç 5: –ú–∞—Ä–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        marina = entities.get('marina')
        assert marina is not None, "–ú–∞—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –î–∞–µ–º –ú–∞—Ä–∏–Ω–µ –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testing_task = """
        –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é Python:
        
        def calculate_factorial(n):
            '''–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n'''
            if n < 0:
                return None
            if n == 0 or n == 1:
                return 1
            return n * calculate_factorial(n - 1)
        
        –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç-–∫–µ–π—Å—ã, –ø—Ä–æ–≤–µ—Ä—å edge cases.
        """
        
        try:
            response = await marina.think(testing_task)
            
            assert response is not None, "–ú–∞—Ä–∏–Ω–∞ –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            assert len(response) > 100, "–û—Ç–≤–µ—Ç –ú–∞—Ä–∏–Ω—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_indicators = ['—Ç–µ—Å—Ç', 'test', 'edge case', '–ø—Ä–æ–±–ª–µ–º', 'issue', 'assert', '–ø—Ä–æ–≤–µ—Ä–∫']
            found_indicators = [indicator for indicator in test_indicators if indicator.lower() in response.lower()]
            
            assert len(found_indicators) >= 3, f"–í –æ—Ç–≤–µ—Ç–µ –ú–∞—Ä–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–π–¥–µ–Ω–æ: {found_indicators}"
            
            print(f"‚úÖ –ú–∞—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print(f"   –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {found_indicators}")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –ú–∞—Ä–∏–Ω—ã: {e}")
            raise
    
    @pytest.mark.asyncio
    async def test_petrovich_supervision_task(self, entities):
        """–¢–µ—Å—Ç 6: –ü–µ—Ç—Ä–æ–≤–∏—á –º–æ–∂–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç—å"""
        print("\nüë®‚Äçüíº –¢–µ—Å—Ç 6: –ü–µ—Ç—Ä–æ–≤–∏—á –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")
        
        petrovich = entities.get('petrovich')
        assert petrovich is not None, "–ü–µ—Ç—Ä–æ–≤–∏—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –î–∞–µ–º –ü–µ—Ç—Ä–æ–≤–∏—á—É –∑–∞–¥–∞—á—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        supervision_task = """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É, —Ä–∞–∑–±–µ–π –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –í–∞—Å–∏ –∏ –ú–∞—Ä–∏–Ω—ã.
        –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏.
        """
        
        try:
            response = await petrovich.think(supervision_task)
            
            assert response is not None, "–ü–µ—Ç—Ä–æ–≤–∏—á –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"
            assert len(response) > 150, "–û—Ç–≤–µ—Ç –ü–µ—Ç—Ä–æ–≤–∏—á–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            planning_indicators = ['–∑–∞–¥–∞—á', '—ç—Ç–∞–ø', 'plan', 'step', '–∫—Ä–∏—Ç–µ—Ä–∏', 'criteria', '–ø—Ä–∏–µ–º–∫', 'acceptance']
            found_indicators = [indicator for indicator in planning_indicators if indicator.lower() in response.lower()]
            
            assert len(found_indicators) >= 3, f"–í –æ—Ç–≤–µ—Ç–µ –ü–µ—Ç—Ä–æ–≤–∏—á–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–π–¥–µ–Ω–æ: {found_indicators}"
            
            print(f"‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")
            print(f"   –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {found_indicators}")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –ü–µ—Ç—Ä–æ–≤–∏—á–∞: {e}")
            raise
    
    @pytest.mark.asyncio
    async def test_team_communication_workflow(self, entities):
        """–¢–µ—Å—Ç 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        print("\nüí¨ –¢–µ—Å—Ç 7: –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º workflow: –ü–µ—Ç—Ä–æ–≤–∏—á ‚Üí –í–∞—Å—è ‚Üí –ú–∞—Ä–∏–Ω–∞
        
        # 1. –ü–µ—Ç—Ä–æ–≤–∏—á —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
        petrovich = entities.get('petrovich')
        task_brief = "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤"
        
        petrovich_response = await petrovich.think(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Ä–∞–∑–±–µ–π –∑–∞–¥–∞—á—É: {task_brief}")
        assert petrovich_response is not None, "–ü–µ—Ç—Ä–æ–≤–∏—á –Ω–µ —Å–æ–∑–¥–∞–ª –ø–ª–∞–Ω –∑–∞–¥–∞—á–∏"
        print("‚úÖ –ü–µ—Ç—Ä–æ–≤–∏—á —Å–æ–∑–¥–∞–ª –ø–ª–∞–Ω –∑–∞–¥–∞—á–∏")
        
        # 2. –í–∞—Å—è –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç –ü–µ—Ç—Ä–æ–≤–∏—á–∞
        vasya = entities.get('vasya')
        vasya_task = f"–ü–µ—Ç—Ä–æ–≤–∏—á –¥–∞–ª –∑–∞–¥–∞—á—É: {task_brief}. –†–µ–∞–ª–∏–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."
        
        vasya_response = await vasya.think(vasya_task)
        assert vasya_response is not None, "–í–∞—Å—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É"
        print("‚úÖ –í–∞—Å—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É")
        
        # 3. –ú–∞—Ä–∏–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –í–∞—Å–∏
        marina = entities.get('marina')
        marina_task = f"–í–∞—Å—è —Å–æ–∑–¥–∞–ª –∫–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –µ–≥–æ: {vasya_response[:200]}..."
        
        marina_response = await marina.think(marina_task)
        assert marina_response is not None, "–ú–∞—Ä–∏–Ω–∞ –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–¥"
        print("‚úÖ –ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–¥")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç—Ç–∞–ø—ã workflow –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        workflow_steps = [
            (petrovich_response, "–ü–µ—Ç—Ä–æ–≤–∏—á"),
            (vasya_response, "–í–∞—Å—è"),
            (marina_response, "–ú–∞—Ä–∏–Ω–∞")
        ]
        
        for response, agent in workflow_steps:
            assert len(response) > 50, f"–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ {agent} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π workflow –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def test_mcp_integration(self, entities):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîå –¢–µ—Å—Ç 8: MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        
        for agent_name, agent in entities.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MCP –∫–ª–∏–µ–Ω—Ç–∞
            assert hasattr(agent, 'mcp_client'), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MCP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            mcp_client = agent.mcp_client
            assert mcp_client is not None, f"MCP –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
            if hasattr(mcp_client, 'servers'):
                print(f"   –ê–≥–µ–Ω—Ç {agent_name}: {len(mcp_client.servers)} MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –∏–º–µ–µ—Ç MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        
        print("‚úÖ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")


def run_synthetic_tests():
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        import subprocess
        result = subprocess.run([
            'python', '-m', 'pytest', 
            __file__, 
            '-v', 
            '--tb=short',
            '--disable-warnings'
        ], capture_output=True, text=True)
        
        print("STDOUT:")
        print(result.stdout)
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("\nüéâ –í—Å–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
            
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    success = run_synthetic_tests()
    sys.exit(0 if success else 1) 
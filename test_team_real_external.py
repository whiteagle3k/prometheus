#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º–∏ LLM.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç GPT-4o –∏ Claude –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
"""

import asyncio
import json
import time
from pathlib import Path
import requests


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def check_anthropic_console():
    """Provide instructions for checking Anthropic console."""
    print("üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤ Anthropic:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://console.anthropic.com/")
    print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Usage -> Activity")
    print("   3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤")
    print("   4. –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ API –≤—ã–∑–æ–≤—ã")


def check_openai_console():
    """Provide instructions for checking OpenAI console."""
    print("üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤ OpenAI:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://platform.openai.com/usage")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Activity –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   3. –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ API –≤—ã–∑–æ–≤—ã")


async def test_agent_external_llm(agent_name: str, entity_name: str, test_message: str):
    """Test single agent with external LLM."""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent_name} ({entity_name})...")
    
    # API endpoint
    url = "http://localhost:8000/v1/chat"
    
    # Request data
    data = {
        "message": test_message,
        "user_id": "test_external_routing"
    }
    
    # Headers
    headers = {
        "Content-Type": "application/json"
    }
    
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {agent_name}...")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        
        start_time = time.time()
        
        # Make request with entity parameter
        response = requests.post(
            url,
            json=data,
            headers=headers,
            params={"entity": entity_name},
            timeout=60
        )
        
        elapsed_time = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get("answer", "")
            route_used = result.get("route_used", "unknown")
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed_time:.1f} —Å–µ–∫")
            print(f"üéØ –ú–∞—Ä—à—Ä—É—Ç: {route_used}")
            print(f"üìù –û—Ç–≤–µ—Ç: {answer[:100]}..." if len(answer) > 100 else f"üìù –û—Ç–≤–µ—Ç: {answer}")
            
            # Check if external route was used
            if route_used == "external":
                print("‚úÖ –í–ù–ï–®–ù–ò–ô LLM –ò–°–ü–û–õ–¨–ó–û–í–ê–ù! üéâ")
                return True
            else:
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {route_used}")
                return False
                
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –¢–µ–∫—Å—Ç: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (60 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


async def main():
    """Main test function."""
    print_section("üöÄ –¢–ï–°–¢ –í–ù–ï–®–ù–ò–• LLM –í –ö–û–ú–ê–ù–î–ï –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í")
    
    print("üéØ –¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç GPT-4o/Claude –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    
    # Check if API server is running
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run python prometheus.py api")
            return
    except:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run python prometheus.py api")
        return
    
    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Test cases for each agent
    test_cases = [
        {
            "agent_name": "–ü–µ—Ç—Ä–æ–≤–∏—á (Supervisor)",
            "entity_name": "petrovich", 
            "message": "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É.",
            "expected_llm": "GPT-4o"
        },
        {
            "agent_name": "–í–∞—Å—è (Developer)",
            "entity_name": "vasya",
            "message": "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é count_files(directory) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.",
            "expected_llm": "Claude Sonnet"
        },
        {
            "agent_name": "–ú–∞—Ä–∏–Ω–∞ (QA)",
            "entity_name": "marina", 
            "message": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é count_files –∏ –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.",
            "expected_llm": "GPT-4o"
        }
    ]
    
    # Show console checking instructions
    print_section("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–†–û–í–ï–†–ö–ï")
    check_anthropic_console()
    print()
    check_openai_console()
    
    # Run tests
    results = {}
    
    for test_case in test_cases:
        print_section(f"üß™ {test_case['agent_name']}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: {test_case['expected_llm']}")
        
        success = await test_agent_external_llm(
            test_case["agent_name"],
            test_case["entity_name"], 
            test_case["message"]
        )
        
        results[test_case["agent_name"]] = success
        
        # Pause between requests
        if success:
            print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            await asyncio.sleep(3)
    
    # Summary
    print_section("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    
    all_passed = True
    for agent, success in results.items():
        status = "‚úÖ –í–ù–ï–®–ù–ò–ô LLM" if success else "‚ùå –õ–û–ö–ê–õ–¨–ù–´–ô"
        print(f"{agent}: {status}")
        if not success:
            all_passed = False
    
    print_section("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    
    if all_passed:
        print("üéâ –í–°–ï –ê–ì–ï–ù–¢–´ –ò–°–ü–û–õ–¨–ó–£–Æ–¢ –í–ù–ï–®–ù–ò–ï LLM!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∞")
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª–∏:")
        print("   ‚Ä¢ Anthropic Console: –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã Claude") 
        print("   ‚Ä¢ OpenAI Console: –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã GPT-4o")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ê–ì–ï–ù–¢–´ –í–°–ï –ï–©–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢ –õ–û–ö–ê–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   ‚Ä¢ –í–Ω–µ—à–Ω–∏–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")


if __name__ == "__main__":
    asyncio.run(main()) 
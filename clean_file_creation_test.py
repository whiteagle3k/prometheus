#!/usr/bin/env python3
"""
üìÅ –ß–ò–°–¢–´–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –§–ê–ô–õ–ê –ê–ì–ï–ù–¢–û–ú
"""

import requests
import time
import json
from pathlib import Path

def clean_test_file_creation():
    """–ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ Developer –∞–≥–µ–Ω—Ç–æ–º."""
    
    print("üìÅ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –§–ê–ô–õ–ê –ê–ì–ï–ù–¢–û–ú DEVELOPER (–í–ê–°–Ø)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        health_response = requests.get("http://localhost:8000/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è Developer (–í–∞—Å–∏)
    task = """–í–∞—Å—è, —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π:

def hello_world(name):
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

if __name__ == "__main__":
    print(hello_world("–ú–∏—Ä"))

–ò—Å–ø–æ–ª—å–∑—É–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    
    print("üìã –ó–ê–î–ê–ß–ê –î–õ–Ø –í–ê–°–ò (developer):")
    print(f"   {task}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    test_file = Path("hello_world.py")
    if test_file.exists():
        test_file.unlink()
        print("üóëÔ∏è –£–¥–∞–ª–∏–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞")
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –í–∞—Å–µ (developer)...")
    
    try:
        start_time = time.time()
        response = requests.post(
            "http://localhost:8000/v1/chat",
            params={"entity": "developer"},  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ID
            json={"message": task, "user_id": "file_creation_test"},
            timeout=60
        )
        elapsed = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
            route = result.get('route', 'unknown')
            latency = result.get('latency', elapsed)
            
            print(f"‚úÖ –í–ê–°–Ø (DEVELOPER) –û–¢–í–ï–¢–ò–õ:")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {latency:.1f}—Å")
            print(f"   üõ§Ô∏è  –ú–∞—Ä—à—Ä—É—Ç: {route}")
            print(f"   üí¨ –û—Ç–≤–µ—Ç –í–∞—Å–∏:")
            
            # –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            lines = answer.split('\n')
            for line in lines:
                if line.strip():
                    print(f"      {line}")
            
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª
            if test_file.exists():
                print("üéâ –§–ê–ô–õ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try:
                    with open(test_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    print("üìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê:")
                    content_lines = content.split('\n')
                    for i, line in enumerate(content_lines, 1):
                        print(f"      {i:2d}: {line}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫–æ–¥
                    print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ö–û–î:")
                    try:
                        exec(content)
                        print("   ‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                print("   –í–æ–∑–º–æ–∂–Ω–æ –í–∞—Å—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª MCP tools")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç –í–∞—Å–∏: HTTP {response.status_code}")
            print(f"   {response.text}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    clean_test_file_creation() 
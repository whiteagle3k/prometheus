#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –í–∞—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ anthropic.
"""

import asyncio
import json
from pathlib import Path
from core.llm.router import LLMRouter, TaskContext
from core.llm.providers import ExternalLLMManager
from core.processing.configs.config_loader import load_agent_config


def print_section(title: str):
    """Print section header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


async def test_anthropic_provider():
    """Test if anthropic provider is working."""
    print_section("üß™ –¢–ï–°–¢ ANTHROPIC –ü–†–û–í–ê–ô–î–ï–†–ê")
    
    # Load Vasya's config
    config = load_agent_config('vasya')
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –í–∞—Å–∏")
        return False
    
    external_config = config.get('external_llms', {})
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è external_llms:")
    print(f"   primary_provider: {external_config.get('primary_provider')}")
    print(f"   routing_preferences: {external_config.get('routing_preferences')}")
    
    # Test external LLM manager
    external_manager = ExternalLLMManager(providers_config=external_config)
    
    # Check available providers
    available_providers = external_manager.list_available_providers()
    print(f"\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {available_providers}")
    
    # Test anthropic specifically
    try:
        anthropic_provider = external_manager.get_provider('anthropic')
        if anthropic_provider:
            print("‚úÖ Anthropic –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω")
            
            # Try to get best available
            best_provider = await external_manager.get_best_available()
            if best_provider:
                print(f"üéØ –õ—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {best_provider.provider_type.value}")
                print(f"   –ú–æ–¥–µ–ª—å: {best_provider.get_model_info().get('model', 'unknown')}")
                
                # Test simple request
                try:
                    response = await best_provider.generate(
                        prompt="Hello, can you respond in 10 words or less?",
                        max_tokens=50,
                        temperature=0.1
                    )
                    print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: {response[:100]}...")
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
                return False
        else:
            print("‚ùå Anthropic –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è anthropic: {e}")
        return False


async def test_vasya_routing():
    """Test routing decision for Vasya."""
    print_section("üéØ –¢–ï–°–¢ –†–û–£–¢–ò–ù–ì–ê –í–ê–°–ò")
    
    # Load Vasya's config
    config = load_agent_config('vasya')
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –í–∞—Å–∏")
        return False
    
    # Create router with Vasya's config
    router = LLMRouter(identity_config=config)
    
    # Test routing for coding task
    task = TaskContext(
        prompt="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        max_tokens=1000,
        temperature=0.1
    )
    
    try:
        # Test routing decision
        decision = await router.route_task(task)
        print(f"üéØ –†–µ—à–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: {decision.value}")
        
        if decision.value == "external":
            # Test actual execution
            result = await router.execute_task(task)
            route_used = result.get('route_used', 'unknown')
            
            # Check consultation metadata for provider info
            metadata = result.get('consultation_metadata', {})
            provider = metadata.get('provider', 'unknown')
            model = metadata.get('model', 'unknown')
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            print(f"   route_used: {route_used}")
            print(f"   provider: {provider}")
            print(f"   model: {model}")
            
            if provider == "anthropic":
                print("‚úÖ –í–∞—Å—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Anthropic (Claude) –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
                return True
            else:
                print(f"‚ö†Ô∏è –í–∞—Å—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {provider} –≤–º–µ—Å—Ç–æ Anthropic")
                return False
        else:
            print("‚ö†Ô∏è –†–æ—É—Ç–µ—Ä –≤—ã–±—Ä–∞–ª –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞: {e}")
        return False


async def test_vasya_anthropic():
    config = load_agent_config('vasya')
    external_config = config.get('external_llms', {})
    
    print("Primary provider:", external_config.get('primary_provider'))
    print("Routing preferences:", external_config.get('routing_preferences'))
    
    router = LLMRouter(identity_config=config)
    task = TaskContext(prompt="Create a function", max_tokens=500)
    
    result = await router.execute_task(task)
    metadata = result.get('consultation_metadata', {})
    
    print("Provider used:", metadata.get('provider', 'unknown'))
    print("Model used:", metadata.get('model', 'unknown'))


async def main():
    """Main test function."""
    print_section("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ANTHROPIC –ü–†–û–í–ê–ô–î–ï–†–ê –í–ê–°–ò")
    
    # Test 1: Check if anthropic provider works at all
    anthropic_works = await test_anthropic_provider()
    
    # Test 2: Check Vasya's routing
    vasya_routing_correct = await test_vasya_routing()
    
    # Test 3: Check Vasya's anthropic usage
    await test_vasya_anthropic()
    
    # Summary
    print_section("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    
    print(f"Anthropic –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ –î–ê' if anthropic_works else '‚ùå –ù–ï–¢'}")
    print(f"–í–∞—Å—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Anthropic: {'‚úÖ –î–ê' if vasya_routing_correct else '‚ùå –ù–ï–¢'}")
    
    if anthropic_works and vasya_routing_correct:
        print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        print("   –í–∞—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Anthropic (Claude) –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞")
    elif anthropic_works and not vasya_routing_correct:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –†–û–£–¢–ò–ù–ì–û–ú")
        print("   Anthropic —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –í–∞—Å—è –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç")
    elif not anthropic_works:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –° ANTHROPIC –ü–†–û–í–ê–ô–î–ï–†–û–ú")
        print("   –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    
    return anthropic_works and vasya_routing_correct


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 
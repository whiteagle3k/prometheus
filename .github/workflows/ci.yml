name: Prometheus CI/CD

on:
  push:
    branches: [ main, develop, feature/*, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests
      run: |
        poetry run pytest tests/ -v --tb=short
    
    - name: Run linting
      run: |
        # Run ruff check for syntax errors only - don't fail build on style issues
        echo "🔍 Running code quality checks..."
        poetry run ruff check . --select=E9,F63,F7,F82 || echo "⚠️ Some code quality issues found but not blocking build"
        
        # Check basic code formatting but don't fail
        echo "🎨 Checking code formatting..."
        poetry run black --check . || echo "⚠️ Code formatting could be improved but not blocking build"
        
        # Show a summary of all issues for awareness (but don't fail)
        echo "📊 Full linting report (for awareness only):"
        poetry run ruff check . --statistics || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t prometheus:test .
    
    - name: Test Docker container - API mode
      run: |
        # Start container in background
        docker run -d --name prometheus-test \
          --health-interval=5s \
          --health-timeout=3s \
          --health-retries=3 \
          -p 8000:8000 \
          prometheus:test api
        
        # Wait for health check
        timeout 60 bash -c 'until docker exec prometheus-test curl -f http://localhost:8000/health; do sleep 2; done'
        
        # Test basic endpoints
        sleep 5
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/metrics || exit 1
        
        # Cleanup
        docker stop prometheus-test
        docker rm prometheus-test
    
    - name: Test Docker container - Tests inside container
      run: |
        # Run tests inside the container
        docker run --rm \
          -v $(pwd)/tests:/app/tests:ro \
          prometheus:test \
          sh -c "poetry run pytest tests/test_singleton.py tests/test_api.py -v"

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'prometheus:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  stress-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and start service
      run: |
        docker build -t prometheus:stress .
        docker run -d --name prometheus-stress -p 8000:8000 prometheus:stress api
        
        # Wait for startup
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Install hey (load testing tool)
      run: |
        wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
        chmod +x hey_linux_amd64
        sudo mv hey_linux_amd64 /usr/local/bin/hey
    
    - name: Run load test
      run: |
        echo "Running 50 RPS load test for 30 seconds..."
        hey -z 30s -q 50 -c 5 \
          -H "Content-Type: application/json" \
          -d '{"user_id":"stress_test","message":"Hello Aletheia"}' \
          -m POST \
          http://localhost:8000/v1/chat > stress_results.txt
        
        cat stress_results.txt
        
        # Extract average latency (should be under 1s for basic responses)
        avg_latency=$(grep "Average:" stress_results.txt | awk '{print $2}' | sed 's/s//')
        echo "Average latency: ${avg_latency}s"
        
        # Check if latency is reasonable (under 1 second)
        if (( $(echo "$avg_latency > 1.0" | bc -l) )); then
          echo "❌ Average latency too high: ${avg_latency}s"
          exit 1
        else
          echo "✅ Load test passed: ${avg_latency}s average latency"
        fi
    
    - name: Cleanup stress test
      if: always()
      run: |
        docker stop prometheus-stress || true
        docker rm prometheus-stress || true
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: stress-test-results
        path: stress_results.txt

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging (placeholder)
      run: |
        echo "🚀 Would deploy to staging environment here"
        echo "Version: $(date +%Y%m%d-%H%M%S)"
        echo "Image: prometheus:$(git rev-parse --short HEAD)"
        # Here you would typically:
        # - Push to container registry
        # - Update Kubernetes/Docker Compose
        # - Run integration tests

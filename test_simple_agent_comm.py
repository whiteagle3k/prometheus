#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç agent_communication MCP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–∑–æ–ª—è—Ü–∏–∏
"""

import asyncio
import subprocess
import sys
import json
from pathlib import Path

async def test_agent_comm_server():
    """–¢–µ—Å—Ç agent_communication —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é."""
    print("üß™ –¢–µ—Å—Ç agent_communication MCP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server_script = "core/mcp/servers/agent_communication_server.py"
    
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {server_script}...")
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ poetry —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        process = await asyncio.create_subprocess_exec(
            "poetry", "run", "python", server_script,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º handshake...")
        
        # –û—Ç–ø—Ä–∞–≤–∏–º initialize message
        init_message = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {
                    "name": "test-client",
                    "version": "1.0.0"
                }
            }
        }
        
        message_str = json.dumps(init_message) + "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É
        process.stdin.write(message_str.encode())
        await process.stdin.drain()
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ initialize —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            stdout_data = await asyncio.wait_for(
                process.stdout.readline(), 
                timeout=5.0
            )
            
            if stdout_data:
                response = stdout_data.decode().strip()
                print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response[:200]}...")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    response_data = json.loads(response)
                    if "result" in response_data:
                        print("‚úÖ Handshake —É—Å–ø–µ—à–µ–Ω!")
                        return True
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_data}")
                except json.JSONDecodeError:
                    print(f"‚ùå –ù–µ JSON –æ—Ç–≤–µ—Ç: {response}")
            else:
                print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                
        except asyncio.TimeoutError:
            print("‚ùå Timeout - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
        
    finally:
        # Cleanup
        try:
            process.terminate()
            await process.wait()
        except:
            pass


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    success = await test_agent_comm_server()
    
    if success:
        print("\nüéâ Agent communication —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüíî Agent communication —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pip install mcp)")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ—Ä–≤–µ—Ä–∞")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")


if __name__ == "__main__":
    asyncio.run(main()) 
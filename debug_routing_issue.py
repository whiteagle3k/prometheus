#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–æ—É—Ç–∏–Ω–≥–æ–º –∏ –∞–≥–µ–Ω—Ç–∞–º–∏.
"""

import asyncio
import requests
import time
import json


async def test_simple_request(entity: str, message: str = "–ü—Ä–∏–≤–µ—Ç!"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É."""
    url = "http://localhost:8000/v1/chat"
    data = {"message": message, "user_id": "debug_test"}
    
    print(f"\n{'='*50}")
    print(f"–¢–ï–°–¢ –ê–ì–ï–ù–¢–ê: {entity}")
    print(f"{'='*50}")
    
    try:
        start_time = time.time()
        
        response = requests.post(
            url, json=data, 
            params={"entity": entity}, 
            timeout=60
        )
        
        elapsed = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get("answer", "")
            route = result.get("route_used", "–ù–ï_–û–ü–†–ï–î–ï–õ–ï–ù")
            latency = result.get("latency_seconds", elapsed)
            
            print(f"‚úÖ –£–°–ü–ï–• –∑–∞ {elapsed:.1f}—Å")
            print(f"üéØ –ú–ê–†–®–†–£–¢: '{route}'")
            print(f"‚è±Ô∏è –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.2f}—Å")
            print(f"üìù –û—Ç–≤–µ—Ç: {answer[:200]}...")
            
            # Debug info
            if hasattr(result, 'keys'):
                print(f"üîß –í—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞: {list(result.keys())}")
            
            return True, route, answer
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:500]}")
            return False, None, None
            
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False, None, None


async def test_agent_identity_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É identity –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é."""
    print(f"\n{'='*50}")
    print(f"–¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò IDENTITY")
    print(f"{'='*50}")
    
    # Test loading entities directly
    entities = ["aletheia", "vasya", "marina"]
    
    for entity in entities:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É {entity}...")
        try:
            # Try to load via API health check
            response = requests.get(f"http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                available = data.get("running_agents", [])
                
                if entity in available:
                    print(f"   ‚úÖ {entity} –¥–æ—Å—Ç—É–ø–µ–Ω –≤ API")
                else:
                    print(f"   ‚ùå {entity} –ù–ï –ù–ê–ô–î–ï–ù –≤ API")
                    print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {entity}: {e}")


async def test_complex_routing_task():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ä–æ—É—Ç–∏–Ω–≥."""
    print(f"\n{'='*50}")
    print(f"–¢–ï–°–¢ –°–õ–û–ñ–ù–û–ô –ó–ê–î–ê–ß–ò –î–õ–Ø –†–û–£–¢–ò–ù–ì–ê")
    print(f"{'='*50}")
    
    # Test each agent with a complex task
    complex_task = """–≠—Ç–æ –°–õ–û–ñ–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ó–ê–î–ê–ß–ê —Ç—Ä–µ–±—É—é—â–∞—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è:

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.

–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    
    agents = ["aletheia", "vasya", "marina"]
    
    for agent in agents:
        success, route, answer = await test_simple_request(agent, complex_task)
        
        if success:
            if route == "external":
                print(f"   üåê ‚úÖ {agent}: –í–ù–ï–®–ù–ò–ô LLM –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            elif route == "unknown":
                print(f"   ‚ùì ‚ö†Ô∏è {agent}: –º–∞—Ä—à—Ä—É—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            else:
                print(f"   üè† ‚ùå {agent}: –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ({route})")
        else:
            print(f"   üí• ‚ùå {agent}: –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")


async def test_api_response_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API."""
    print(f"\n{'='*50}")
    print(f"–¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê API")
    print(f"{'='*50}")
    
    try:
        response = requests.post(
            "http://localhost:8000/v1/chat",
            json={"message": "—Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "user_id": "debug"},
            params={"entity": "aletheia"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:")
            
            # Pretty print the structure
            for key, value in result.items():
                value_type = type(value).__name__
                if isinstance(value, str):
                    value_preview = value[:50] + "..." if len(value) > 50 else value
                    print(f"   {key}: {value_type} = '{value_preview}'")
                else:
                    print(f"   {key}: {value_type} = {value}")
        else:
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ API: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –†–û–£–¢–ò–ù–ì–ê –ò –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    # Check API availability
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            data = response.json()
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {data.get('running_agents', [])}")
        else:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # Run diagnostic tests
    await test_agent_identity_loading()
    await test_api_response_structure()
    
    # Test simple requests
    print(f"\n{'='*60}")
    print("–¢–ï–°–¢ –ü–†–û–°–¢–´–• –ó–ê–ü–†–û–°–û–í")
    print(f"{'='*60}")
    
    agents = ["aletheia", "vasya", "marina"]
    simple_results = []
    
    for agent in agents:
        success, route, answer = await test_simple_request(agent, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        simple_results.append((agent, success, route))
    
    # Test complex routing
    await test_complex_routing_task()
    
    # Summary
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print(f"{'='*60}")
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for agent, success, route in simple_results:
        status = "‚úÖ" if success else "‚ùå"
        route_status = f"(route: {route})" if route else "(–Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞)"
        print(f"   {agent}: {status} {route_status}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    failed_agents = [agent for agent, success, _ in simple_results if not success]
    unknown_routes = [agent for agent, success, route in simple_results if success and route == "unknown"]
    
    if failed_agents:
        print(f"‚ùå –ü–æ—á–∏–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤: {failed_agents}")
    if unknown_routes:
        print(f"üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–æ—É—Ç–∏–Ω–≥ –¥–ª—è: {unknown_routes}")
    if not failed_agents and not unknown_routes:
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

def test_entities_discovery():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from entities import discover_entities
        entities = discover_entities()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(entities)}")
        
        required_agents = ['petrovich', 'vasya', 'marina']
        for agent in required_agents:
            if agent in entities:
                info = entities[agent]
                print(f"   ‚úÖ {agent}: {info.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
            else:
                print(f"   ‚ùå {agent}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_entities_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        agents = {}
        
        for name in ['petrovich', 'vasya', 'marina']:
            if name in entities_info:
                entity_class = entities_info[name]['class']
                agent = entity_class()
                agents[name] = agent
                print(f"   ‚úÖ {name}: —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå {name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False

def test_identities_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ identity —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ identity...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        for name in ['petrovich', 'vasya', 'marina']:
            entity_class = entities_info[name]['class']
            agent = entity_class()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º identity
            if hasattr(agent, 'identity') and agent.identity:
                identity = agent.identity
                agent_name = identity.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                role = identity.get('personality', {}).get('role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ä–æ–ª—å')
                print(f"   ‚úÖ {name} ({agent_name}): {role}")
            else:
                print(f"   ‚ùå {name}: identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ identity: {e}")
        return False

def test_mcp_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from entities import discover_entities
        entities_info = discover_entities()
        
        for name in ['petrovich', 'vasya', 'marina']:
            entity_class = entities_info[name]['class']
            agent = entity_class()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –º–µ—Ç–æ–¥—ã
            mcp_methods = ['read_file', 'write_file', 'git_status', 'execute_command', 'web_search']
            available_methods = 0
            
            for method in mcp_methods:
                if hasattr(agent, method):
                    available_methods += 1
            
            if available_methods >= 3:
                print(f"   ‚úÖ {name}: {available_methods}/{len(mcp_methods)} MCP –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è {name}: —Ç–æ–ª—å–∫–æ {available_methods}/{len(mcp_methods)} MCP –º–µ—Ç–æ–¥–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ MCP: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("=" * 50)
    
    tests = [
        ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", test_entities_discovery),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", test_entities_creation),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ identity", test_identities_loading),
        ("MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_mcp_availability)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"üìù {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"   ‚úÖ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   ‚ùå –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 
import asyncio
import os
from pathlib import Path
import unittest

from core.runtime.registry import AgentRegistry

class TestAletheiaExternalRouting(unittest.TestCase):
    async def asyncSetUp(self):
        self.registry = AgentRegistry()
        self.aletheia = await self.registry.get_agent('aletheia')
        await self.aletheia._ensure_mcp()
        self.tools = await self.aletheia.mcp_client.get_available_capabilities()
        self.aletheia._tools = self.tools

    async def asyncTearDown(self):
        await self.registry.shutdown_all()

    async def test_aletheia_external_routing(self):
        # USER -> Aletheia (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
        user_request = "–î–æ–±–∞–≤–∏—Ç—å timestamp –Ω–∞ –≤—Å–µ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å (–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ print)"
        print(f"\n[TEST] USER -> Aletheia: {user_request}")
        aletheia_response = await self.aletheia.think(user_request)
        response_data = aletheia_response.get('result', aletheia_response)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
        execution_details = response_data.get('execution_details', {})
        route_used = execution_details.get('route_used', '')
        print(f"[TEST] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {route_used}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π LLM
        self.assertEqual(route_used, 'external', "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π LLM")
        print(f"[TEST] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –∑–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π LLM")

if __name__ == '__main__':
    async def run_tests():
        test_case = TestAletheiaExternalRouting()
        await test_case.asyncSetUp()
        try:
            await test_case.test_aletheia_external_routing()
            print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! Aletheia –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–Ω–µ—à–Ω–µ–º—É LLM üéâ")
        finally:
            await test_case.asyncTearDown()
    asyncio.run(run_tests()) 